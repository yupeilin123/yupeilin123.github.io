<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青蛙蛤蟆兽</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-20T03:24:10.722Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yupeilin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>html基本知识</title>
    <link href="http://yoursite.com/2019/04/20/front-end/html/"/>
    <id>http://yoursite.com/2019/04/20/front-end/html/</id>
    <published>2019-04-20T03:22:21.000Z</published>
    <updated>2019-04-20T03:24:10.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><h3 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h3><p>HTML 是一种描述 Web 文档结构和语义的语言；它由元素组成，每个元素可以有一些属性。网页中的内容通过 HTML 元素标记，如 <code>&lt;img&gt;</code> 、<code>&lt;title&gt;</code> 、<code>&lt;p&gt;</code> 、<code>&lt;div&gt;</code> 等等。</p><h4 id="根元素"><a href="#根元素" class="headerlink" title="根元素"></a>根元素</h4><p><code>&lt;html&gt;</code></p><h4 id="文档元数据"><a href="#文档元数据" class="headerlink" title="文档元数据"></a>文档元数据</h4><p>元数据（Metadata）含有页面的相关信息，包括样式、脚本及数据，能帮助一些软件（例如 搜索引擎、浏览器 等等）更好地运用和渲染页面。对于样式和脚本的元数据，可以直接在网页里定义，也可以链接到包含相关信息的外部文件。</p><p><code>&lt;base&gt;</code> , <code>&lt;head&gt;</code> , <code>&lt;meta&gt;</code> ,<code>&lt;link&gt;</code> , <code>&lt;style&gt;</code> , <code>&lt;script&gt;</code></p><a id="more"></a><h4 id="分区根元素"><a href="#分区根元素" class="headerlink" title="分区根元素"></a>分区根元素</h4><p><code>&lt;body&gt;</code></p><h4 id="内容分区"><a href="#内容分区" class="headerlink" title="内容分区"></a>内容分区</h4><p>内容分区元素允许你将文档内容从逻辑上进行组织划分。使用包括页眉(header)、页脚(footer)、导航(nav)和标题(h1~h6)等分区元素，来为页面内容创建明确的大纲，以便区分各个章节的内容。</p><p><code>&lt;main&gt;</code> , <code>&lt;aside&gt;</code> , <code>&lt;article&gt;</code> , <code>&lt;nav&gt;</code> , <code>&lt;section&gt;</code> , <code>&lt;header&gt;</code> , <code>&lt;footer&gt;</code> , <code>&lt;h1&gt;</code> , <code>&lt;h2&gt;</code> , <code>&lt;h3&gt;</code> , <code>&lt;h4&gt;</code> , <code>&lt;h5&gt;</code> , <code>&lt;h6&gt;</code> , <code>&lt;address&gt;</code> </p><h4 id="文本内容"><a href="#文本内容" class="headerlink" title="文本内容"></a>文本内容</h4><p>使用 HTML 文本内容元素来组织在开标签 <code>&lt;body&gt;</code> 和闭标签 <code>&lt;/body&gt;</code> 里的块或章节的内容。这些元素能标识内容的宗旨或结构，而这对于 accessibility 和 SEO 很重要。</p><p><code>&lt;blockquote&gt;</code> , <code>&lt;div&gt;</code> , <code>&lt;dl&gt;</code> , <code>&lt;dt&gt;</code> , <code>&lt;dd&gt;</code> , <code>&lt;figcaption&gt;</code> , <code>&lt;figure&gt;</code> , <code>&lt;hr&gt;</code> , <code>&lt;main&gt;</code>  , <code>&lt;p&gt;</code> , <code>&lt;pre&gt;</code> , <code>&lt;ul&gt;</code> , <code>&lt;li&gt;</code> , <code>&lt;ol&gt;</code></p><h4 id="内联文本语义"><a href="#内联文本语义" class="headerlink" title="内联文本语义"></a>内联文本语义</h4><p>使用 HTML 内联文本语义（Inline text semantics）定义一个单词、一行内容，或任意文字的语义、结构或样式。</p><p><code>&lt;a&gt;</code> , <code>&lt;abbr&gt;</code> , <code>&lt;b&gt;</code> , <code>&lt;bid&gt;</code> , <code>&lt;bdo&gt;</code> , <code>&lt;br&gt;</code> , <code>&lt;cite&gt;</code> , <code>&lt;code&gt;</code> , <code>&lt;data&gt;</code> , <code>&lt;dfn&gt;</code> , <code>&lt;em&gt;</code> , <code>&lt;i&gt;</code> , <code>&lt;kbd&gt;</code> , <code>&lt;mark&gt;</code> , <code>&lt;q&gt;</code> , <code>&lt;ruby&gt;</code> ,  <code>&lt;rb&gt;</code> , <code>&lt;rp&gt;</code> , <code>&lt;rt&gt;</code> , <code>&lt;rtc&gt;</code> , <code>&lt;s&gt;</code> , <code>&lt;samp&gt;</code> , <code>&lt;small&gt;</code> , <code>&lt;span&gt;</code> , <code>&lt;strong&gt;</code> , <code>&lt;sub&gt;</code> , <code>&lt;sup&gt;</code> , <code>&lt;time&gt;</code> , <code>&lt;u&gt;</code> , <code>&lt;var&gt;</code> , <code>&lt;wbr&gt;</code></p><h4 id="图片和多媒体"><a href="#图片和多媒体" class="headerlink" title="图片和多媒体"></a>图片和多媒体</h4><p>HTML 支持各种多媒体资源，例如图像，音频和视频。</p><p><code>&lt;map&gt;</code> , <code>&lt;area&gt;</code> , <code>&lt;img&gt;</code> , <code>&lt;audio&gt;</code> , <code>&lt;video&gt;</code> , <code>&lt;track&gt;</code></p><h4 id="内嵌内容"><a href="#内嵌内容" class="headerlink" title="内嵌内容"></a>内嵌内容</h4><p>常规的多媒体内容，HTML 可以包括各种其他的内容，即使它并不容易交互。</p><p><code>&lt;souce&gt;</code> , <code>&lt;picture&gt;</code> , <code>&lt;object&gt;</code> , <code>&lt;params&gt;</code> , <code>&lt;iframe&gt;</code> , <code>&lt;embed&gt;</code></p><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><p>为了创建动态内容和 Web 应用程序，HTML 支持使用脚本语言，最突出的就是 JavaScript。某些元素支持此功能。</p><p><code>&lt;canvas&gt;</code> , <code>&lt;noscript&gt;</code> , <code>&lt;script&gt;</code></p><h4 id="编辑标识"><a href="#编辑标识" class="headerlink" title="编辑标识"></a>编辑标识</h4><p>这些元素能标示出某个文本被更改过的部分。</p><p><code>&lt;del&gt;</code> , <code>&lt;ins&gt;</code></p><h4 id="表格内容"><a href="#表格内容" class="headerlink" title="表格内容"></a>表格内容</h4><p>这里的元素用于创建和处理表格数据。其他元素在 table 元素中可以出现一个或者更多。</p><p><code>&lt;table&gt;</code> , <code>&lt;caption&gt;</code> , <code>&lt;colgroup&gt;</code> , <code>&lt;col&gt;</code> , <code>&lt;thead&gt;</code> , <code>&lt;tbody&gt;</code> , <code>&lt;tr&gt;</code> , <code>&lt;th&gt;</code> , <code>&lt;td&gt;</code> , <code>&lt;tfoot&gt;</code></p><h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><p>HTML 提供了许多可一起使用的元素，这些元素能用来创建一个用户可以填写并提交到网站或应用程序的表单。</p><p><code>&lt;button&gt;</code> , <code>&lt;datalist&gt;</code> , <code>&lt;fieldset&gt;</code> , <code>&lt;legend&gt;</code> , <code>&lt;form&gt;</code> , <code>&lt;label&gt;</code> , <code>&lt;meter&gt;</code> , <code>&lt;select&gt;</code> , <code>&lt;optgroup&gt;</code> , <code>&lt;option&gt;</code> , <code>&lt;output&gt;</code> , <code>&lt;progress&gt;</code> , <code>&lt;select&gt;</code> , <code>&lt;textarea&gt;</code></p><h4 id="交互元素"><a href="#交互元素" class="headerlink" title="交互元素"></a>交互元素</h4><p>HTML 提供了一系列有助于创建交互式用户界面对象的元素。</p><p><code>&lt;details&gt;</code> , <code>&lt;summary&gt;</code> , <code>&lt;dialog&gt;</code> , <code>&lt;menu&gt;</code> , <code>&lt;menuitem&gt;</code> (实验性)</p><h4 id="Web-组件"><a href="#Web-组件" class="headerlink" title="Web 组件"></a>Web 组件</h4><p>Web 组件是一种与 HTML 相关联（HTML-related）的技术，简单来说，它允许创建自定义元素，并如同普通的 HTML 一样使用它们。此外，你甚至可以创建经过自定义的标准 HTML 元素。</p><p><code>&lt;template&gt;</code> , <code>&lt;slot&gt;</code></p><h3 id="行内元素与块级元素"><a href="#行内元素与块级元素" class="headerlink" title="行内元素与块级元素"></a>行内元素与块级元素</h3><p><strong>内容</strong></p><p>一般情况下，行内元素只能包含数据和其他行内元素。</p><p>而块级元素可以包含行内元素和其他块级元素。这种结构上的包含继承区别可以使块级元素创建比行内元素更”大型“的结构。</p><p><strong>格式</strong></p><p>默认情况下，行内元素不会以新行开始，而块级元素会新起一行。</p><h4 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h4><p><code>&lt;b&gt;</code> , <code>&lt;i&gt;</code> , <code>&lt;small&gt;</code> </p><p><code>&lt;abbr&gt;</code> , <code>&lt;cite&gt;</code> , <code>&lt;code&gt;</code> , <code>&lt;dfn&gt;</code> , <code>&lt;em&gt;</code> , <code>&lt;kbd&gt;</code> , <code>&lt;strong&gt;</code> , <code>&lt;samp&gt;</code> , <code>&lt;var&gt;</code> </p><p><code>&lt;a&gt;</code> , <code>&lt;br&gt;</code> , <code>&lt;img&gt;</code> , <code>&lt;map&gt;</code> , <code>&lt;object&gt;</code> , <code>&lt;q&gt;</code> , <code>&lt;script&gt;</code> , <code>&lt;span&gt;</code> , <code>&lt;sub&gt;</code> , <code>&lt;sup&gt;</code> </p><p><code>&lt;button&gt;</code> , <code>&lt;input&gt;</code> , <code>&lt;label&gt;</code> , <code>&lt;select&gt;</code> , <code>&lt;textarea&gt;</code></p><h4 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h4><p><code>&lt;article&gt;</code> , <code>&lt;aside&gt;</code> , <code>&lt;audio&gt;</code> , <code>&lt;canvs&gt;</code> , <code>&lt;figure&gt;</code> , <code>&lt;figcaption&gt;</code> , <code>&lt;header&gt;</code> ，<code>&lt;footer&gt;</code> , <code>&lt;hgroup&gt;</code> ，<code>&lt;output&gt;</code> , <code>&lt;section&gt;</code> ，<code>&lt;video&gt;</code></p><p><code>&lt;address&gt;</code> , <code>&lt;blockquote&gt;</code> ,  <code>&lt;dl&gt;</code> , <code>&lt;dd&gt;</code> , <code>&lt;div&gt;</code> , <code>&lt;fieldset&gt;</code> ，<code>&lt;form&gt;</code> ,  <code>&lt;h1&gt;</code> , <code>&lt;h2&gt;</code> , <code>&lt;h3&gt;</code> , <code>&lt;h4&gt;</code> , <code>&lt;h5&gt;</code> , <code>&lt;h6&gt;</code>  <code>&lt;hr&gt;</code> , <code>&lt;noscript&gt;</code> , <code>&lt;ol&gt;</code> , <code>&lt;ul&gt;</code> , <code>&lt;p&gt;</code> ,  <code>&lt;pre&gt;</code>  , <code>&lt;table&gt;</code></p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h4 id="常见属性"><a href="#常见属性" class="headerlink" title="常见属性"></a>常见属性</h4><p><code>accept</code> ：服务器接受内容或文件类型的列表。 </p><p><code>action</code> ：表单信息提交的url地址，指向进行处理的程序。</p><p><code>alt</code> ：在图片无法呈现时的替代文本。</p><p><code>async</code> ：加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）。</p><p><code>autocomplete</code> ：表示该表单中是否可以由浏览器自动完成填值。</p><p><code>autofocus</code> ：在网页加载后该元素应该自动聚焦。</p><p><code>autoplay</code> ：audio或video应该自动播放。</p><p><code>charset</code> ：申明该页面或脚本的字符编码。</p><p><code>checked</code> ：指出该元素在页面加载后是否处于选中状态。</p><p><code>content</code> ：标签 meta 的 http equiv或 name 关联的值。</p><p><code>defer</code> ：加载后续文档元素的过程将和 script.js 的加载并行进行（异步），但是 script.js 的执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成。</p><p><code>disabled</code> ：表示用户是否可以与元素交互。</p><p><code>language</code> ：定义元素中使用的脚本语言。</p><p><code>name</code> ：元素的名称。多用于 form。</p><p><code>placeholder</code> ：向用户提供可在该字段中输入的内容的提示。</p><p><code>readonly</code> ：用于指明用户无法修改控件的值。</p><p><code>pattern</code> ：检查控件值的正则表达式。</p><p><code>selected</code> ：定义将在页面加载时选择的值。</p><p><code>src</code> ：可嵌入内容的URL。</p><p><code>target</code> ：该属性指定在何处显示链接的资源。</p><p><code>type</code> ：定义元素的类型。</p><p><code>value</code> ：定义页面加载时，在元素内显示的默认值。</p><p><code>height</code> ：元素的高度，适用于 canvas 等。</p><p><code>width</code> ：元素的宽度，适用于 canvas 等。</p><p><code>href</code> ：关联资源的URL。</p><p><code>rows</code> ：定义textarea中的行数。</p><p><code>rowspan</code> ：定义表格单元格应跨越的行数。</p><p><code>colspan</code> ：定义表格单元格应跨越的列数。</p><p><code>max</code> ：表示允许的最大值。</p><p><code>mix</code> ：表示允许的最小值。</p><p><code>maxlength</code> ：定义元素中允许的最大字符数。</p><p><code>multiple</code> ：指示用户能否输入多个值。这个属性仅在type属性为email或file的时候生效。</p><p><code>required</code> ：指示是否需要填写此元素。</p><h4 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h4><p><code>accesskey</code> ：提供了为当前元素生成键盘快捷键的提示。这个属性由空格分隔的字符列表组成。浏览器应该使用在计算机键盘布局上存在的第一个。</p><p><code>autocapitalize</code> ：控制用户的文本输入是否和如何自动大写。</p><p><code>class</code> ：一个以空格分隔的元素的类名（classes）列表，它允许 CSS 和 Javascript 通过类选择器 (class selectors) 或 DOM 方法 (document.getElementsByClassName) 来选择和访问特定的元素。</p><p><code>contenteditable</code> ：一个枚举属性（enumerated attribute），表示元素是否可被用户编辑。 如果可以，浏览器会调整元素的部件（widget）以允许编辑。</p><p><code>data-*</code> ：自定义数据属性，它赋予我们在所有 HTML 元素上嵌入自定义数据属性的能力，并可以通过脚本(一般指JavaScript) 与 HTML 之间进行专有数据的交换。</p><p><code>dir</code> ：一个指示元素中文本方向的枚举属性。</p><p><code>draggable</code> ：一种枚举属性，指示是否可以 使用 Drag and Drop API 拖动元素。</p><p><code>dropzone</code> (实验性) ：枚举属性，指示可以使用Drag and Drop API在元素上删除哪些类型的内容。</p><p><code>hidden</code> ：布尔属性，隐藏对应元素，即 display: block 。</p><p><code>id</code> ：定义唯一标识符（ID），该标识符在整个文档中必须是唯一的。</p><p><code>is</code> ：允许您指定标准HTML元素应该像已注册的自定义内置元素一样。</p><p><code>itemid</code> ：是元素的唯一的全局标识符。itemid 属性只能为同时拥有 itemscope 和 itemtype 的元素指定。同时，itemid 只能为拥有 itemscope 的元素指定。</p><p><code>itemprop</code> ：被用于向一个物体中添加属性。</p><p><code>itemref</code> ： 提供了元素 id（并不是 itemid）的列表，并带有文档其它地方的额外属性。itemref 属性只能在指定了 itemscope 的元素上指定。</p><p><code>itemscope</code> ：一个元素的 itemscope 属性会创建一个项，包含了一组与元素相关的键值对。</p><p><code>itemtype</code> ：将会用于定义数据结构中的 itemprop（条目属性）。itemscope 用于设置词汇的生效范围，其中词汇在数据结构中由 itemtype 设置。</p><p><code>lang</code> ：定义元素语言。这个语言是不可编辑元素写入的语言，或者可编辑元素应该写入的语言。</p><p><code>slot</code> (实验性) ：将一个 shadow DOM shadow 树中的槽分配给一个元素， 带有 slot 属性的元素分配给由 <code>&lt;slot&gt;</code> 创建的槽，它的 name 属性的值匹配 slot 属性的值。</p><p><code>spellcheck</code> (实验性) ：是否可以检查元素的拼写错误。</p><p><code>style</code> ：含要应用于元素的CSS样式声明。</p><p><code>tabindex</code> ：示其元素是否可以聚焦，以及它是否/在何处参与顺序键盘导航。</p><p><code>title</code> ：包含表示与其所属元素相关信息的文本。当鼠标悬停在元素上面时，提示框显示的文本。</p><p><code>translate</code> (实验性) ：被用来规定对应元素的属性值及其子文本节点内容，是否跟随系统语言作出对应的翻译变化。</p><p>除了这些属性之外，还存在以下全局属性</p><ul><li><p>xml:lang 和 xml:base ——两者都是从XHTML规范继承，但为了兼容性而被保留的。</p></li><li><p>多重aria-*属性，用于改善可访问性。</p></li><li><p>事件处理程序属性：onabort, onautocomplete, onautocompleteerror, onblur, oncancel, oncanplay, oncanplaythrough, onchange, onclick, onclose, oncontextmenu, oncuechange, ondblclick, ondrag, ondragend, ondragenter, ondragexit, ondragleave, ondragover, ondragstart, ondrop, ondurationchange, onemptied, onended, onerror, onfocus, oninput, oninvalid, onkeydown, onkeypress, onkeyup, onload, onloadeddata, onloadedmetadata, onloadstart, onmousedown, onmouseenter, onmouseleave, onmousemove, onmouseout, onmouseover, onmouseup, onmousewheel, onpause, onplay, onplaying, onprogress, onratechange, onreset, onresize, onscroll, onseeked, onseeking, onselect, onshow, onsort, onstalled, onsubmit, onsuspend, ontimeupdate, ontoggle, onvolumechange, onwaiting。</p></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>HTML的媒体支持：audio 和 video 元素，WebM 和 MPEG H.264 AAC 编码格式被支持较好。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;html&quot;&gt;&lt;a href=&quot;#html&quot; class=&quot;headerlink&quot; title=&quot;html&quot;&gt;&lt;/a&gt;html&lt;/h2&gt;&lt;h3 id=&quot;元素&quot;&gt;&lt;a href=&quot;#元素&quot; class=&quot;headerlink&quot; title=&quot;元素&quot;&gt;&lt;/a&gt;元素&lt;/h3&gt;&lt;p&gt;HTML 是一种描述 Web 文档结构和语义的语言；它由元素组成，每个元素可以有一些属性。网页中的内容通过 HTML 元素标记，如 &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 、&lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; 、&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 、&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 等等。&lt;/p&gt;
&lt;h4 id=&quot;根元素&quot;&gt;&lt;a href=&quot;#根元素&quot; class=&quot;headerlink&quot; title=&quot;根元素&quot;&gt;&lt;/a&gt;根元素&lt;/h4&gt;&lt;p&gt;&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;文档元数据&quot;&gt;&lt;a href=&quot;#文档元数据&quot; class=&quot;headerlink&quot; title=&quot;文档元数据&quot;&gt;&lt;/a&gt;文档元数据&lt;/h4&gt;&lt;p&gt;元数据（Metadata）含有页面的相关信息，包括样式、脚本及数据，能帮助一些软件（例如 搜索引擎、浏览器 等等）更好地运用和渲染页面。对于样式和脚本的元数据，可以直接在网页里定义，也可以链接到包含相关信息的外部文件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; ,&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="front-end" scheme="http://yoursite.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>Koa系列-Utilities：koa-convert</title>
    <link href="http://yoursite.com/2019/04/15/koa/koa-convert/"/>
    <id>http://yoursite.com/2019/04/15/koa/koa-convert/</id>
    <published>2019-04-15T07:20:01.000Z</published>
    <updated>2019-04-15T07:56:13.977Z</updated>
    
    <content type="html"><![CDATA[<p>该中间件是用来转化 <code>koa legacy</code> 中间件。</p><p><code>convert</code> 是用来将中间件(0.x &amp; 1.x)转化为(2.x)</p><p><code>convert.back</code> 是用来将中间件(2.x)转化为(0.x &amp; 1.x)</p><p><code>convert.compose</code> 是通过 <code>koa-compose</code> 来执行这些转化过的中间件。</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span> (<span class="params">mw</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断类型</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> mw !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'middleware must be a function'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 是不是generator函数</span></span><br><span class="line">  <span class="keyword">if</span> (mw.constructor.name !== <span class="string">'GeneratorFunction'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> mw</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 使用co转化</span></span><br><span class="line">  <span class="keyword">const</span> converted = <span class="function"><span class="keyword">function</span> (<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> co.call(ctx, mw.call(ctx, createGenerator(next)))</span><br><span class="line">  &#125;</span><br><span class="line">  converted._name = mw._name || mw.name</span><br><span class="line">  <span class="keyword">return</span> converted</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将 promise next 转化为 generator</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">createGenerator</span> (<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">yield</span> next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">convert.back = <span class="function"><span class="keyword">function</span> (<span class="params">mw</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断类型</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> mw !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'middleware must be a function'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 是不是generator函数</span></span><br><span class="line">  <span class="keyword">if</span> (mw.constructor.name === <span class="string">'GeneratorFunction'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> mw</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//通过co转化promise middleware</span></span><br><span class="line">  <span class="keyword">const</span> converted = <span class="function"><span class="keyword">function</span> * (<span class="params">next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ctx = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">let</span> called = <span class="literal">false</span></span><br><span class="line">    <span class="comment">// 防止next被调用多次，即每次只允许一个next调用，否则就会有一些next被重复执行</span></span><br><span class="line">      <span class="keyword">if</span> (called) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'next() called multiple times'</span>))</span><br><span class="line">      &#125;</span><br><span class="line">      called = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">return</span> co.call(ctx, next)</span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">  converted._name = mw._name || mw.name</span><br><span class="line">  <span class="keyword">return</span> converted</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">convert.compose = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(arr)) &#123;</span><br><span class="line">    arr = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 通过koa-compose执行转化过的中间件</span></span><br><span class="line">  <span class="keyword">return</span> compose(arr.map(convert))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;该中间件是用来转化 &lt;code&gt;koa legacy&lt;/code&gt; 中间件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;convert&lt;/code&gt; 是用来将中间件(0.x &amp;amp; 1.x)转化为(2.x)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;convert.back&lt;/code&gt; 是用来将中间件(2.x)转化为(0.x &amp;amp; 1.x)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;convert.compose&lt;/code&gt; 是通过 &lt;code&gt;koa-compose&lt;/code&gt; 来执行这些转化过的中间件。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Koa系列-Utilities：koa-compose</title>
    <link href="http://yoursite.com/2019/04/15/koa/koa-compose/"/>
    <id>http://yoursite.com/2019/04/15/koa/koa-compose/</id>
    <published>2019-04-15T03:51:07.000Z</published>
    <updated>2019-04-15T07:55:04.122Z</updated>
    
    <content type="html"><![CDATA[<p>中间件 <code>koa-compose</code> 是用来组合所有的中间件来依次执行。</p><p>首先先判断 <code>middleware</code> 的类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(middleware)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Middleware stack must be an array!'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> fn <span class="keyword">of</span> middleware) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">'function'</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Middleware must be composed of functions!'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>然后开始依次调用中间件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">context, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// last called middleware #</span></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">-1</span></span><br><span class="line">  <span class="comment">// 执行第一个中间件</span></span><br><span class="line">  <span class="keyword">return</span> dispatch(<span class="number">0</span>)</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 防止next被调用多次，即每次只允许一个next调用，否则就会有一些next被重复执行</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt;= index) <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'next() called multiple times'</span>))</span><br><span class="line">    index = i</span><br><span class="line">    <span class="keyword">let</span> fn = middleware[i]</span><br><span class="line">    <span class="comment">// 若没有中间件，则返回next。或者中间件的顺序为中间件的长度时，返回next</span></span><br><span class="line">    <span class="keyword">if</span> (i === middleware.length) fn = next</span><br><span class="line">    <span class="comment">// 不存在fn，返回promise.resolve，接上 `.then(handleResponse).catch(onerror);`</span></span><br><span class="line">    <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve()</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 下一个中间件的next=dispatch.bind(null, i + 1))，所以中间件会去执行await next()，实则去执行下一个中间件</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(fn(context, dispatch.bind(<span class="literal">null</span>, i + <span class="number">1</span>)));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;中间件 &lt;code&gt;koa-compose&lt;/code&gt; 是用来组合所有的中间件来依次执行。&lt;/p&gt;
&lt;p&gt;首先先判断 &lt;code&gt;middleware&lt;/code&gt; 的类型&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.isArray(middleware)) &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;TypeError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Middleware stack must be an array!&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; fn &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; middleware) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; fn !== &lt;span class=&quot;string&quot;&gt;&#39;function&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;TypeError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Middleware must be composed of functions!&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Koa系列-Response Transformation：koa-res</title>
    <link href="http://yoursite.com/2019/04/01/koa/koa-res/"/>
    <id>http://yoursite.com/2019/04/01/koa/koa-res/</id>
    <published>2019-04-01T06:54:02.000Z</published>
    <updated>2019-04-01T07:02:06.138Z</updated>
    
    <content type="html"><![CDATA[<p>代码比较简单，干净。主要是控制responseBody的数据。</p><p>首先判断 <code>options.custom</code> 是不是一个函数，若不是则提示类型错误。</p><p>然后如果存在 <code>ctx._returnRaw</code> 为 <code>true</code>，则直接返回 <code>ctx.body</code> 。</p><a id="more"></a><p>否则，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> status = ctx.status</span><br><span class="line"><span class="keyword">const</span> data = ctx.body</span><br><span class="line"><span class="comment">// 忽略 method = option and status = 404</span></span><br><span class="line"><span class="keyword">if</span> (ctx.method.toLowerCase !== <span class="string">'option'</span> &amp;&amp; status !== <span class="number">404</span>) &#123;</span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    ok: <span class="literal">true</span>,</span><br><span class="line">    data: data,</span><br><span class="line">    version: options.version || version || <span class="string">'1.0.0'</span>,</span><br><span class="line">    now: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (custom) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(ctx.body, custom(ctx))</span><br><span class="line">  &#125;</span><br><span class="line">  ctx.status = status</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果应用运行错误，则在 <code>ctx.body</code> 中加入 <code>statck: e.stack</code> 。</p><p>配置了 <code>options.debug = true</code> ，则不显示 <code>ctx.body.stack</code> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代码比较简单，干净。主要是控制responseBody的数据。&lt;/p&gt;
&lt;p&gt;首先判断 &lt;code&gt;options.custom&lt;/code&gt; 是不是一个函数，若不是则提示类型错误。&lt;/p&gt;
&lt;p&gt;然后如果存在 &lt;code&gt;ctx._returnRaw&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt;，则直接返回 &lt;code&gt;ctx.body&lt;/code&gt; 。&lt;/p&gt;
    
    </summary>
    
      <category term="Koa" scheme="http://yoursite.com/categories/Koa/"/>
    
    
      <category term="koa" scheme="http://yoursite.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>Koa系列-i18n：koa-i18n</title>
    <link href="http://yoursite.com/2019/03/28/koa/koa-i18n/"/>
    <id>http://yoursite.com/2019/03/28/koa/koa-i18n/</id>
    <published>2019-03-28T06:12:30.000Z</published>
    <updated>2019-03-28T06:37:41.306Z</updated>
    
    <content type="html"><![CDATA[<p>首先是使用了 <code>i18n-2</code> ，这个模块意指被设计给 <code>Express</code> 开箱即用。但这个模块是fork了 <code>i18n</code> 。所以想要看具体的配置用法，得去搜索 <code>i18n</code> 。除此之外，这个中间件必须得搭配 <code>koa-locale</code> 一起使用。</p><p>首先定义 <code>LOCALE_METHODS</code> ,其值的意思是有几种使用 <code>i18n</code> 的方式，分别是 <code>Subdomain</code> , <code>Cookie</code> , <code>Header</code> , <code>Query</code> , <code>Url</code> , <code>TL</code> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> LOCALE_METHODS = [</span><br><span class="line">  <span class="string">'Subdomain'</span>,</span><br><span class="line">  <span class="string">'Cookie'</span>,</span><br><span class="line">  <span class="string">'Header'</span>,</span><br><span class="line">  <span class="string">'Query'</span>,</span><br><span class="line">  <span class="string">'Url'</span>,</span><br><span class="line">  <span class="string">'TLD'</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> SET_PREFIX = <span class="string">'setLocaleFrom'</span></span><br><span class="line"><span class="keyword">const</span> GET_PREFIX = <span class="string">'getLocaleFrom'</span></span><br></pre></td></tr></table></figure><p>然后再定义类 <code>I18n</code> 继承 <code>I18n2</code> ，通过配置选项得到 <code>modes</code> 和 <code>whitelist</code> 。</p><a id="more"></a><p>然后将 <code>LOCALE_METHODS</code> 通过循环将 <code>SET_PREFIX + val</code> 分别挂载到 <code>I18n.prototype</code> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">LOCALE_METHODS.forEach(<span class="function">(<span class="params">m</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(I18n.prototype, SET_PREFIX + m, &#123;</span><br><span class="line">    value: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> locale = getLocale(<span class="keyword">this</span>.request[GET_PREFIX + m]())</span><br><span class="line">      <span class="keyword">if</span> (locale === <span class="keyword">this</span>.getLocale()) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      <span class="keyword">if</span> ((locale = filter(locale, <span class="keyword">this</span>.locales))) &#123;</span><br><span class="line">        <span class="keyword">this</span>.setLocale(locale)</span><br><span class="line">        debug(<span class="string">'Overriding locale from %s : %s'</span>, m.toLowerCase(), locale)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>定义函数 <code>ial</code></p><p>在 <code>app.context</code> 上定义 <code>i18n</code> 属性，其 <code>get</code> 函数为类 <code>I18n</code> 的实例。<br>也给 <code>app.crequest</code> 上定义了 <code>i18n</code> 属性。</p><p>最后通过 <code>whitelist</code> 筛选出不需要的 <code>i18n</code> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">i18nMiddleware</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">  ctx.i18n.whitelist.some(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> customLocaleMethod = <span class="keyword">typeof</span> key === <span class="string">'function'</span></span><br><span class="line">      &amp;&amp; ctx.i18n.setLocale(key.apply(ctx))</span><br><span class="line">    <span class="keyword">if</span> (customLocaleMethod || ctx.i18n[SET_PREFIX + key]()) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerMethods</span>(<span class="params">helpers, i18n</span>) </span>&#123;</span><br><span class="line">  I18n.resMethods.forEach(<span class="function"><span class="params">method</span> =&gt;</span> &#123;</span><br><span class="line">    helpers[method] = i18n[method].bind(i18n)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 得到当前locale值的小写</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLocale</span>(<span class="params">locale</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (locale || <span class="string">''</span>).toLowerCase()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 筛选locale</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">locale, locales</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> k <span class="keyword">in</span> locales) &#123;</span><br><span class="line">    <span class="keyword">if</span> (locale === k.toLowerCase()) &#123;</span><br><span class="line">      <span class="keyword">return</span> k</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先是使用了 &lt;code&gt;i18n-2&lt;/code&gt; ，这个模块意指被设计给 &lt;code&gt;Express&lt;/code&gt; 开箱即用。但这个模块是fork了 &lt;code&gt;i18n&lt;/code&gt; 。所以想要看具体的配置用法，得去搜索 &lt;code&gt;i18n&lt;/code&gt; 。除此之外，这个中间件必须得搭配 &lt;code&gt;koa-locale&lt;/code&gt; 一起使用。&lt;/p&gt;
&lt;p&gt;首先定义 &lt;code&gt;LOCALE_METHODS&lt;/code&gt; ,其值的意思是有几种使用 &lt;code&gt;i18n&lt;/code&gt; 的方式，分别是 &lt;code&gt;Subdomain&lt;/code&gt; , &lt;code&gt;Cookie&lt;/code&gt; , &lt;code&gt;Header&lt;/code&gt; , &lt;code&gt;Query&lt;/code&gt; , &lt;code&gt;Url&lt;/code&gt; , &lt;code&gt;TL&lt;/code&gt; 。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; LOCALE_METHODS = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;Subdomain&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;Cookie&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;Header&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;Query&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;Url&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;TLD&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; SET_PREFIX = &lt;span class=&quot;string&quot;&gt;&#39;setLocaleFrom&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; GET_PREFIX = &lt;span class=&quot;string&quot;&gt;&#39;getLocaleFrom&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后再定义类 &lt;code&gt;I18n&lt;/code&gt; 继承 &lt;code&gt;I18n2&lt;/code&gt; ，通过配置选项得到 &lt;code&gt;modes&lt;/code&gt; 和 &lt;code&gt;whitelist&lt;/code&gt; 。&lt;/p&gt;
    
    </summary>
    
      <category term="Koa" scheme="http://yoursite.com/categories/Koa/"/>
    
    
      <category term="koa" scheme="http://yoursite.com/tags/koa/"/>
    
  </entry>
  
</feed>
