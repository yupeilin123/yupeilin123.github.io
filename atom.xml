<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青蛙蛤蟆兽</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-23T06:34:39.202Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yupeilin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>每周npm模块源码解读：pify</title>
    <link href="http://yoursite.com/2018/10/23/npm/pify/"/>
    <id>http://yoursite.com/2018/10/23/npm/pify/</id>
    <published>2018-10-23T05:54:37.000Z</published>
    <updated>2018-10-23T06:34:39.202Z</updated>
    
    <content type="html"><![CDATA[<p><strong>周2018.10.22 ~ 2018.10.28</strong></p><h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>模块名：<code>pify</code></p><p>github: <a href="https://github.com/sindresorhus/pify" target="_blank" rel="noopener">https://github.com/sindresorhus/pify</a></p><p>描述：将回调函数promise化，也就是回调函数可以使用then、catch</p><p>适合人群：至少看过一遍源码</p><a id="more"></a><h5 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h5><p>首先通过 <code>Object.assign</code> 返回新的配置选项，然后判断pify的第一个参数的类型。如类型不正确，则报错。</p><p>如果第一个参数的类型是函数，则创建一个函数，根据 <code>excludeMain</code> 来判断是用它本身自己还是promise化的回调。</p><p>如果第一个参数的类型是对象，则创建一个新的对象，这个对象的原型为这个对象的原型。接着去遍历第一个参数(对象)，通过三表表达式判断对象的每个Key是否为函数和一个筛选函数，如果为true，则将这个函数promise化，否则直接返回该值。</p><p>函数 <code>processFn</code> 就是将回调函数promise化。先创建Promsise函数，然后在其通过配置选项处理参数。最后通过 <code>fn.apply(this.args)</code> 来执行。</p><h5 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h5><p>node中的大部分异步函数可以用模块pify来promise化。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;周2018.10.22 ~ 2018.10.28&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h5&gt;&lt;p&gt;模块名：&lt;code&gt;pify&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;github: &lt;a href=&quot;https://github.com/sindresorhus/pify&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/sindresorhus/pify&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;描述：将回调函数promise化，也就是回调函数可以使用then、catch&lt;/p&gt;
&lt;p&gt;适合人群：至少看过一遍源码&lt;/p&gt;
    
    </summary>
    
      <category term="npm" scheme="http://yoursite.com/categories/npm/"/>
    
    
      <category term="Npm" scheme="http://yoursite.com/tags/Npm/"/>
    
  </entry>
  
  <entry>
    <title>koa</title>
    <link href="http://yoursite.com/2018/10/22/koa/koa-middleware/"/>
    <id>http://yoursite.com/2018/10/22/koa/koa-middleware/</id>
    <published>2018-10-22T06:26:27.000Z</published>
    <updated>2018-10-22T07:00:19.634Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>每周npm模块源码解读已经写了8周了，个人觉得这种叙述方式对于没看过源码的读者不太友好。</p><p>而大部分的读者也又不会去看这些模块的源码(根本没有读者)。</p><h3 id="koa简介"><a href="#koa简介" class="headerlink" title="koa简介"></a>koa简介</h3><p>Koa是一个新的web框架，由Express幕后的原班人马打造，致力于成为web应用和API开发领域中的一个更小、更富有表现力、更健壮的基石。</p><p>通过利用async函数，Koa帮你丢弃回调函数，并有力地增强错误处理。 Koa并没有捆绑任何中间件，而是提供了一套优雅的方法，帮助您快速而愉快地编写服务端应用程序。</p><h3 id="市场"><a href="#市场" class="headerlink" title="市场"></a>市场</h3><p>并且很多公司在Koa的基础上进行更深层次的包装，比如egg.js，think.js等。</p><h3 id="打算"><a href="#打算" class="headerlink" title="打算"></a>打算</h3><p>换种更友好的叙述方式来完成Koa中间件系列，会从中间件中挑选不同类型的一种较知名的模块来分析。</p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>有26种不同类型的中间件，也就是26篇。另外加10篇其他的，计划完成36篇。</p><p>计划今年过年前完成，也就是2019年2月4日截止。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="Koa" scheme="http://yoursite.com/categories/Koa/"/>
    
    
      <category term="koa" scheme="http://yoursite.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>staticky中文指南</title>
    <link href="http://yoursite.com/2018/10/21/staticky/"/>
    <id>http://yoursite.com/2018/10/21/staticky/</id>
    <published>2018-10-21T07:51:57.000Z</published>
    <updated>2018-10-22T06:31:59.193Z</updated>
    
    <content type="html"><![CDATA[<p>staticky 是一个更好的、更简单的静态文件服务器。你能使用它然后可以在电脑或手机上查看静态文件。并且当文件发生变化时能自动刷新浏览器。</p><h2 id="怎么使用"><a href="#怎么使用" class="headerlink" title="怎么使用"></a>怎么使用</h2><p>首先你可以先执行 <code>npm install staticky -g</code> 命令，</p><p>然后打开你的项目目录，使用命令 <code>staticky</code>， </p><p>它能自然帮你打开浏览器显示<code>index.html</code>，</p><p>如果 <code>index.html</code> 文件不存在，则它将你的项目目录下的所有文件展示出来。</p><a id="more"></a><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>在项目的目录中使用 <code>staticky</code> 命令。或者，您可以添加作为命令行参数的路径。</p><p>命令行参数：</p><ul><li><code>-p</code> or <code>--port</code> 端口使用，默认8091</li><li><code>-n</code> or <code>--no-browser</code> 是否自动打开浏览器</li><li><code>-t</code> or <code>--target</code> 选择打开哪个文件，默认 <code>index.html</code></li><li><code>-d</code> or <code>--dir</code> 选择工作目录，默认 <code>process.cwd</code></li><li><code>-g</code> or <code>--gzip</code> 是否开启gize压缩</li><li><code>-r</code> or <code>--reload</code> 观察文件或目录的变化，自动刷新。默认选择 <code>target file</code>，只有两个选项 <code>target</code> 或者 <code>dir</code></li><li><code>-h</code> or <code>--help</code> 打印用法</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">staticky -p 8000 // start static file server in port 8000</span><br><span class="line">staticky -n // don&apos;t open browser automatically</span><br><span class="line">staticky -t index.js // the index.js file will be opened</span><br><span class="line">staticky -d src //  the src directory under the current directory will be working directory</span><br><span class="line">staticky -g // open gizp encoding</span><br><span class="line">staticky -r dir // all files in the current directory will be monitored.</span><br></pre></td></tr></table></figure><h2 id="参与贡献"><a href="#参与贡献" class="headerlink" title="参与贡献"></a>参与贡献</h2><p>非常欢迎你的贡献，你可以通过以下方式和我们一起共建：</p><ul><li>通过 Issue bug 或进行咨询。</li><li>提交 Pull Request 改进代码。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;staticky 是一个更好的、更简单的静态文件服务器。你能使用它然后可以在电脑或手机上查看静态文件。并且当文件发生变化时能自动刷新浏览器。&lt;/p&gt;
&lt;h2 id=&quot;怎么使用&quot;&gt;&lt;a href=&quot;#怎么使用&quot; class=&quot;headerlink&quot; title=&quot;怎么使用&quot;&gt;&lt;/a&gt;怎么使用&lt;/h2&gt;&lt;p&gt;首先你可以先执行 &lt;code&gt;npm install staticky -g&lt;/code&gt; 命令，&lt;/p&gt;
&lt;p&gt;然后打开你的项目目录，使用命令 &lt;code&gt;staticky&lt;/code&gt;， &lt;/p&gt;
&lt;p&gt;它能自然帮你打开浏览器显示&lt;code&gt;index.html&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;index.html&lt;/code&gt; 文件不存在，则它将你的项目目录下的所有文件展示出来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="staticky" scheme="http://yoursite.com/tags/staticky/"/>
    
  </entry>
  
  <entry>
    <title>每周npm模块源码解读：anywhere</title>
    <link href="http://yoursite.com/2018/10/17/npm/anywhere/"/>
    <id>http://yoursite.com/2018/10/17/npm/anywhere/</id>
    <published>2018-10-17T14:20:38.000Z</published>
    <updated>2018-10-17T15:41:12.428Z</updated>
    
    <content type="html"><![CDATA[<p><strong>周2018.10.15 ~ 2018.10.21</strong></p><h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>模块名：<code>anywhere</code></p><p>github: <a href="https://github.com/JacksonTian/anywhere" target="_blank" rel="noopener">https://github.com/JacksonTian/anywhere</a></p><p>描述：随时随地将你的当前目录变成一个静态文件服务器的根目录</p><p>适合人群：至少看过一遍源码</p><a id="more"></a><h5 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h5><p>首先使用了模块 <code>minimist</code> 来解析参数。有两个参数是默认的，一个是端口号，另一个是静态文件的当前目录。</p><p>接着使用了模块 <code>connect</code> ，使用了两个中间件：</p><p><code>serve-static</code> : 默认把 <code>process.cwd</code> 作为静态目录，以及请求该目录下 <code>index.html</code> 。</p><p><code>serve-index</code> : 如果该目录下没有 <code>index.html</code> 文件，则将该目录下的文件列表作为请求返回值。</p><p>确定http端口号，以及https的端口号。得到当前ip的地址，或者是‘127.0.0.1’作为主机名。</p><p>创建http服务器，确定https服务器。</p><p>最后自动打开浏览器。</p><h5 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h5><p>实用方便的一个静态服务器。<br>在做完静态页面的时候，想在手机上测试，就使用到了它，通过局域网，在手机上就能访问到了本地的文件。<br>但这个包可以做的更好。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;周2018.10.15 ~ 2018.10.21&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h5&gt;&lt;p&gt;模块名：&lt;code&gt;anywhere&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;github: &lt;a href=&quot;https://github.com/JacksonTian/anywhere&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/JacksonTian/anywhere&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;描述：随时随地将你的当前目录变成一个静态文件服务器的根目录&lt;/p&gt;
&lt;p&gt;适合人群：至少看过一遍源码&lt;/p&gt;
    
    </summary>
    
      <category term="npm" scheme="http://yoursite.com/categories/npm/"/>
    
    
      <category term="NPM" scheme="http://yoursite.com/tags/NPM/"/>
    
  </entry>
  
  <entry>
    <title>学萧</title>
    <link href="http://yoursite.com/2018/10/14/life/%E5%AD%A6%E7%AE%AB/"/>
    <id>http://yoursite.com/2018/10/14/life/学箫/</id>
    <published>2018-10-14T15:23:41.000Z</published>
    <updated>2018-10-16T05:51:05.235Z</updated>
    
    <content type="html"><![CDATA[<p>横吹是笛，竖吹是萧。</p><p>想学横吹，却买了萧。</p><p>萧难笛易，因于发声。</p><p>现已如此，好好学萧。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;横吹是笛，竖吹是萧。&lt;/p&gt;
&lt;p&gt;想学横吹，却买了萧。&lt;/p&gt;
&lt;p&gt;萧难笛易，因于发声。&lt;/p&gt;
&lt;p&gt;现已如此，好好学萧。&lt;/p&gt;

        
      
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="萧" scheme="http://yoursite.com/tags/%E8%90%A7/"/>
    
  </entry>
  
</feed>
