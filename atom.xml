<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青蛙蛤蟆兽</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-21T02:21:51.301Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yupeilin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js基本知识</title>
    <link href="http://yoursite.com/2019/05/21/front-end/js/"/>
    <id>http://yoursite.com/2019/05/21/front-end/js/</id>
    <published>2019-05-21T02:22:21.000Z</published>
    <updated>2019-05-21T02:21:51.301Z</updated>
    
    <content type="html"><![CDATA[<h3 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h3><h4 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h4><p>触发高频事件后 n 秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个是用来获取当前时间戳的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">now</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 防抖函数，返回函数连续调用时，空闲时间必须大于或等于 wait，func 才会执行</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param  &#123;function&#125; func        回调函数</span></span><br><span class="line"><span class="comment"> * @param  &#123;number&#125;   wait        表示时间窗口的间隔</span></span><br><span class="line"><span class="comment"> * @param  &#123;boolean&#125;  immediate   设置为ture时，是否立即调用函数</span></span><br><span class="line"><span class="comment"> * @return &#123;function&#125;             返回客户调用函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span> (<span class="params">func, wait = <span class="number">50</span>, immediate = true</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer, context, args</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 延迟执行函数</span></span><br><span class="line">  <span class="keyword">const</span> later = <span class="function"><span class="params">()</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 延迟函数执行完毕，清空缓存的定时器序号</span></span><br><span class="line">    timer = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 延迟执行的情况下，函数会在延迟函数中执行</span></span><br><span class="line">    <span class="comment">// 使用到之前缓存的参数和上下文</span></span><br><span class="line">    <span class="keyword">if</span> (!immediate) &#123;</span><br><span class="line">      func.apply(context, args)</span><br><span class="line">      context = args = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, wait)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里返回的函数是每次实际调用的函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...params</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果没有创建延迟执行函数（later），就创建一个</span></span><br><span class="line">    <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">      timer = later()</span><br><span class="line">      <span class="comment">// 如果是立即执行，调用函数</span></span><br><span class="line">      <span class="comment">// 否则缓存参数和调用上下文</span></span><br><span class="line">      <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">        func.apply(<span class="keyword">this</span>, params)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        context = <span class="keyword">this</span></span><br><span class="line">        args = params</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">// 如果已有延迟执行函数（later），调用的时候清除原来的并重新设定一个</span></span><br><span class="line">    <span class="comment">// 这样做延迟函数会重新计时</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      clearTimeout(timer)</span><br><span class="line">      timer = later()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h4><p>高频事件触发，但在 n 秒内只会执行一次，所以节流会稀释函数的执行频率。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * underscore 节流函数，返回函数连续调用时，func 执行频率限定为 次 / wait</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param  &#123;function&#125;   func      回调函数</span></span><br><span class="line"><span class="comment"> * @param  &#123;number&#125;     wait      表示时间窗口的间隔</span></span><br><span class="line"><span class="comment"> * @param  &#123;object&#125;     options   如果想忽略开始函数的的调用，传入&#123;leading: false&#125;。</span></span><br><span class="line"><span class="comment"> *                                如果想忽略结尾函数的调用，传入&#123;trailing: false&#125;</span></span><br><span class="line"><span class="comment"> *                                两者不能共存，否则函数不能执行</span></span><br><span class="line"><span class="comment"> * @return &#123;function&#125;             返回客户调用函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">_.throttle = <span class="function"><span class="keyword">function</span> (<span class="params">func, wait, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> context, args, result;</span><br><span class="line">  <span class="keyword">var</span> timeout = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 之前的时间戳</span></span><br><span class="line">  <span class="keyword">var</span> previous = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 如果 options 没传则设为空对象</span></span><br><span class="line">  <span class="keyword">if</span> (!options) options = &#123;&#125;;</span><br><span class="line">  <span class="comment">// 定时器回调函数</span></span><br><span class="line">  <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果设置了 leading，就将 previous 设为 0</span></span><br><span class="line">    <span class="comment">// 用于下面函数的第一个 if 判断</span></span><br><span class="line">    previous = options.leading === <span class="literal">false</span> ? <span class="number">0</span> : _.now();</span><br><span class="line">    <span class="comment">// 置空一是为了防止内存泄漏，二是为了下面的定时器判断</span></span><br><span class="line">    timeout = <span class="literal">null</span>;</span><br><span class="line">    result = func.apply(context, args);</span><br><span class="line">    <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获得当前时间戳</span></span><br><span class="line">    <span class="keyword">var</span> now = _.now();</span><br><span class="line">    <span class="comment">// 首次进入前者肯定为 true</span></span><br><span class="line">    <span class="comment">// 如果需要第一次不执行函数</span></span><br><span class="line">    <span class="comment">// 就将上次时间戳设为当前的</span></span><br><span class="line">    <span class="comment">// 这样在接下来计算 remaining 的值时会大于0</span></span><br><span class="line">    <span class="keyword">if</span> (!previous &amp;&amp; options.leading === <span class="literal">false</span>) previous = now;</span><br><span class="line">    <span class="comment">// 计算剩余时间</span></span><br><span class="line">    <span class="keyword">var</span> remaining = wait - (now - previous);</span><br><span class="line">    context = <span class="keyword">this</span>;</span><br><span class="line">    args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="comment">// 如果当前调用已经大于上次调用时间 + wait</span></span><br><span class="line">    <span class="comment">// 或者用户手动调了时间</span></span><br><span class="line">    <span class="comment">// 如果设置了 trailing，只会进入这个条件</span></span><br><span class="line">    <span class="comment">// 如果没有设置 leading，那么第一次会进入这个条件</span></span><br><span class="line">    <span class="comment">// 还有一点，你可能会觉得开启了定时器那么应该不会进入这个 if 条件了</span></span><br><span class="line">    <span class="comment">// 其实还是会进入的，因为定时器的延时</span></span><br><span class="line">    <span class="comment">// 并不是准确的时间，很可能你设置了2秒</span></span><br><span class="line">    <span class="comment">// 但是他需要2.2秒才触发，这时候就会进入这个条件</span></span><br><span class="line">    <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span> || remaining &gt; wait) &#123;</span><br><span class="line">      <span class="comment">// 如果存在定时器就清理掉否则会调用二次回调</span></span><br><span class="line">      <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">        clearTimeout(timeout);</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      previous = now;</span><br><span class="line">      result = func.apply(context, args);</span><br><span class="line">      <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timeout &amp;&amp; options.trailing !== <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="comment">// 判断是否设置了定时器和 trailing</span></span><br><span class="line">      <span class="comment">// 没有的话就开启一个定时器</span></span><br><span class="line">      <span class="comment">// 并且不能不能同时设置 leading 和 trailing</span></span><br><span class="line">      timeout = setTimeout(later, remaining);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="变量提升-函数提升"><a href="#变量提升-函数提升" class="headerlink" title="变量提升\函数提升"></a>变量提升\函数提升</h3><p>js 在正式执行之前先进行了一次预编译，在这个过程中，将变量声明和函数声明提升至当前作用域的最顶端，然后进行接下来的处理。</p><p>在 ES6 中，<code>let</code> 和 <code>const</code> 所声明的变量有暂时性死区，不存在变量提升；并且不能重复已存在的变量，声明变量的作用域是块级的。</p><p><strong>注：同名函数和变量，在提升阶段，函数会覆盖变量，但是会被变量赋值之后覆盖。</strong></p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>表示变量或函数起作用的区域，指代了它们在什么样的上下文中执行，亦即上下文执行环境。</p><p>js 的函数作用域有全局作用域，函数作用域，块级作用域（ES6)。</p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>是由当前环境与上层环境的一系列作用域共同组成，它保证了当前执行环境对符合访问权限的变量和函数的有序访问。</p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>是指有权访问另一个函数作用域中变量的函数</p><p>如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> b = A();</span><br><span class="line">b(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><a href="https://segmentfault.com/a/1190000009886713#articleHeader2" target="_blank" rel="noopener">深入贯彻闭包思想，全面理解JS闭包形成过程</a></p><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>对于所有对象（<code>null</code> 除外）在创建的时候就会与之关联另一个对象，这个对象就是原型，每一个对象都会从原型”继承”属性。</p><p>对于函数对象，除了 <code>__proto__</code> 属性之外，还有 <code>prototype</code> 属性，当一个函数被用作构造函数来创建实例时，该函数的 <code>prototype</code> 属性值将被作为原型赋值给所有对象实例（也就是设置实例的 <code>__proto__</code> 属性）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">'person'</span>, <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.__proto__ === Person.prototype); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.Constructor === Person); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.Constructor === Person); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>每个实例的 Constructor 属性指向它的构造函数。</p><p>每个实例的 <em>proto</em> 属性指向它的实例原型。</p><p>每个构造函数的原型的 Constructor 属性指向它的构造函数。</p></blockquote><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。</p><p><img src="https://user-images.githubusercontent.com/17822028/57208740-ec1e4700-7007-11e9-9f4c-1b13added162.png" alt="alt 原型链"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数 Object 的原型   函数 Function 的原型</span></span><br><span class="line"><span class="built_in">Object</span>.prototype      <span class="built_in">Function</span>.prototype</span><br><span class="line"><span class="comment">// 函数 Object 的 Constructor 属性值是 Function</span></span><br><span class="line"><span class="built_in">Object</span>.Constructor === <span class="built_in">Function</span></span><br><span class="line"><span class="comment">// 函数 Object 的 __proto__ 属性值是函数 Function 的原型</span></span><br><span class="line"><span class="built_in">Object</span>.__proto__ === <span class="built_in">Function</span>.prototype</span><br><span class="line"><span class="comment">// 函数 Object 的原型是对象，它没有原型</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span></span><br><span class="line"><span class="comment">// 函数 Object 的原型的 Constructor属性是函数 Object</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.Constructor === <span class="built_in">Object</span></span><br><span class="line"><span class="comment">// 函数 Function 的 Constructor 属性值是 Function</span></span><br><span class="line"><span class="built_in">Function</span>.Constructor === <span class="built_in">Function</span></span><br><span class="line"><span class="comment">// 函数 Function 的原型是函数 Function 的原型</span></span><br><span class="line"><span class="built_in">Function</span>.__proto__ === <span class="built_in">Function</span>.prototype</span><br><span class="line"><span class="comment">// 函数 Function 的原型的 __proto__ 属性是函数 Object 的原型</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.__proto__ === <span class="built_in">Object</span>.prototype</span><br><span class="line"><span class="comment">// 函数 Function 的原型的 Constructor属性是函数 Function</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.Constructor === <span class="built_in">Function</span></span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h3 id="new-运算符"><a href="#new-运算符" class="headerlink" title="new 运算符"></a>new 运算符</h3><p><code>new</code> 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。</p><p><code>new</code> 关键字会进行如下的操作：</p><ol><li>创建一个空的简单 JavaScript 对象（即 {}）；</li><li>链接该对象（即设置该对象的构造函数）到另一个对象 ；</li><li>将步骤1新创建的对象作为 <code>this</code> 的上下文 ；</li><li>如果该函数没有返回对象，则返回 <code>this</code>。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="comment">// 借助 Object.setPrototypeOf</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">new2</span>(<span class="params">Constructor, ...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="built_in">Object</span>.setPrototypeOf(obj, Constructor.prototype);</span><br><span class="line">  <span class="keyword">const</span> result = Constructor.apply(obj, args);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> result === <span class="string">'object'</span> ? result : obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 借助 Object.create</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">new2</span>(<span class="params">Constructor, ...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> obj = <span class="built_in">Object</span>.create(Constructor.prototype);</span><br><span class="line">  <span class="keyword">const</span> result = Constructor.apply(obj, args);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> result === <span class="string">'object'</span> ? result : obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">new2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> Constructor = [].shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">  obj.__proto__ = Constructor.prototype;</span><br><span class="line">  <span class="keyword">var</span> result = Constructor.apply(obj, <span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> result === <span class="string">'object'</span> ? result : obj;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="函数参数值传递"><a href="#函数参数值传递" class="headerlink" title="函数参数值传递"></a>函数参数值传递</h3><p>ECMAScript 中所有函数的参数都是按值传递的。</p><p>也就是说，把函数外部的值复制给函数内部的参数，就和把值从一个变量复制到另一个变量一样。</p><p><a href="https://github.com/mqyqingfeng/Blog/issues/10" target="_blank" rel="noopener">JavaScript深入之参数按值传递</a></p><h3 id="this-指向问题"><a href="#this-指向问题" class="headerlink" title="this 指向问题"></a>this 指向问题</h3><p>1.<code>this</code> 永远指向一个对象</p><p>2.<code>this</code> 的指向完全取决于函数调用的位置</p><h4 id="Function-prototype-bind"><a href="#Function-prototype-bind" class="headerlink" title="Function.prototype.bind"></a>Function.prototype.bind</h4><p>能显示的将当前函数与指定的对象绑定，并返回一个新函数，这个新函数无论以什么样的方式调用，其 <code>this</code> 永远指向绑定的对象。</p><h4 id="Function-prototype-call-和-Function-prototype-apply"><a href="#Function-prototype-call-和-Function-prototype-apply" class="headerlink" title="Function.prototype.call 和 Function.prototype.apply"></a>Function.prototype.call 和 Function.prototype.apply</h4><p>使用一个指定的 <code>this</code> 值和单独给出的一个或多个参数来调用一个函数。</p><p>它们只有一个区别，就是 <code>call()</code> 方法接受的是一个参数列表，而 <code>apply()</code> 方法接受的是一个包含多个参数的数组。</p><p>不过使用 <code>apply</code> 和 <code>call</code> 的时候仍然需要注意，如果目录函数本身是一个绑定了 <code>this</code> 对象的函数，那 <code>apply</code> 和 <code>call</code> 不会像预期那样执行。</p><h4 id="ES6箭头函数"><a href="#ES6箭头函数" class="headerlink" title="ES6箭头函数"></a>ES6箭头函数</h4><p>箭头函数没有自己的 <code>this</code> 绑定。箭头函数中使用的 <code>this</code>，其实是直接包含它的那个函数或函数表达式中的 <code>this</code>。</p><h3 id="实现-call、apply、bind"><a href="#实现-call、apply、bind" class="headerlink" title="实现 call、apply、bind"></a>实现 call、apply、bind</h3><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.call2 = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(context)</span><br><span class="line">  context = context || <span class="built_in">window</span>;</span><br><span class="line">  context.__fn__ = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> args = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>, len = <span class="built_in">arguments</span>.length; i &lt; len; i++) &#123;</span><br><span class="line">    args.push(<span class="string">'arguments['</span> + i + <span class="string">']'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">'context.__fn__('</span> + args + <span class="string">')'</span>);</span><br><span class="line">  <span class="keyword">delete</span> context.__fn__</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.call2 = <span class="function"><span class="keyword">function</span> (<span class="params">context, ...args</span>) </span>&#123;</span><br><span class="line">  context = context || <span class="built_in">window</span>;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="built_in">Symbol</span>()</span><br><span class="line">  context[fn] = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">const</span> result = context[fn](...args);</span><br><span class="line">  <span class="keyword">delete</span> context[fn];</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.apply2 = <span class="function"><span class="keyword">function</span> (<span class="params">context, arr</span>) </span>&#123;</span><br><span class="line">  context = context || <span class="built_in">window</span>;</span><br><span class="line">  context.fn = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> result;</span><br><span class="line">  <span class="keyword">if</span> (!arr) &#123;</span><br><span class="line">    result = context.fn();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> args = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">      args.push(<span class="string">'arr['</span> + i + <span class="string">']'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">'context.fn('</span> + args + <span class="string">')'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> context.fn</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.apply2 = <span class="function"><span class="keyword">function</span> (<span class="params">context,args</span>) </span>&#123;</span><br><span class="line">  context = context || <span class="built_in">window</span>;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="built_in">Symbol</span>()</span><br><span class="line">  context[fn] = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">const</span> result = context[fn](args);</span><br><span class="line">  <span class="keyword">delete</span> context[fn];</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params">oThis</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="comment">// closest thing possible to the ECMAScript 5</span></span><br><span class="line">    <span class="comment">// internal IsCallable function</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Function.prototype.bind - what is trying to be bound is not callable'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> aArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> fToBind = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> fNOP = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">  <span class="keyword">var</span> fBound = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取调用时(fBound)的传参.bind 返回的函数入参往往是这么传递的</span></span><br><span class="line">    <span class="keyword">var</span> bindArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="comment">// this instanceof fBound === true时,说明返回的fBound被当做new的构造函数调用</span></span><br><span class="line">    <span class="keyword">return</span> fToBind.apply(<span class="keyword">this</span> <span class="keyword">instanceof</span> fBound ? <span class="keyword">this</span> : oThis, aArgs.concat(bindArgs));</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 维护原型关系</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.prototype) &#123;</span><br><span class="line">    <span class="comment">// Function.prototype doesn't have a prototype property</span></span><br><span class="line">    fNOP.prototype = <span class="keyword">this</span>.prototype;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 下行的代码使fBound.prototype是fNOP的实例,因此</span></span><br><span class="line">  <span class="comment">// 返回的fBound若作为new的构造函数,new生成的新对象作为this传入fBound,新对象的__proto__就是fNOP的实例</span></span><br><span class="line">  fBound.prototype = <span class="keyword">new</span> fNOP();</span><br><span class="line">  <span class="keyword">return</span> fBound;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/mqyqingfeng/Blog/issues/11" target="_blank" rel="noopener">JavaScript深入之call和apply的模拟实现</a><br><a href="https://github.com/mqyqingfeng/Blog/issues/12" target="_blank" rel="noopener">JavaScript深入之bind的模拟实现</a></p><h3 id="深拷贝、浅拷贝问题（immutable是怎么实现的？）"><a href="#深拷贝、浅拷贝问题（immutable是怎么实现的？）" class="headerlink" title="深拷贝、浅拷贝问题（immutable是怎么实现的？）"></a>深拷贝、浅拷贝问题（immutable是怎么实现的？）</h3><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><ul><li><p><code>for...in + hasOwnProperty</code></p></li><li><p><code>array.slice</code></p></li><li><p><code>array.concat</code></p></li><li><p><code>[...arr]</code></p></li><li><p><code>object.assign</code></p></li><li><p><code>{...obj}</code></p></li></ul><p><code>Object.assign</code> 还有一些注意的点是:</p><ol><li>不会拷贝对象继承的属性</li><li>不可枚举的属性</li><li>属性的数据属性/访问器属性</li><li>可以拷贝 Symbol 类型</li></ol><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><ul><li><code>JSON.parse(JSON.stringify(obj))</code></li></ul><p>通过 <code>JSON.stringify</code> 实现深拷贝有几点要注意：</p><ol><li>拷贝的对象的值中如果有函数，undefined，symbol 则经过 <code>JSON.stringify()</code> 序列化后的 JSON 字符串中这个键值对会消失</li><li>无法拷贝不可枚举的属性，无法拷贝对象的原型链</li><li>拷贝 Date 引用类型会变成字符串</li><li>拷贝 RegExp 引用类型会变成空对象</li><li>对象中含有 NaN、Infinity 和 -Infinity，则序列化的结果会变成 null</li><li>无法拷贝对象的循环应用</li></ol><h5 id="实现深拷贝"><a href="#实现深拷贝" class="headerlink" title="实现深拷贝"></a>实现深拷贝</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> target = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">in</span> source) &#123;</span><br><span class="line">    <span class="keyword">if</span> (source.hasOwnProperty(i)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> source[i] === <span class="string">'object'</span>) &#123;</span><br><span class="line">        target[i] = clone(source[i]); <span class="comment">// 注意这里</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        target[i] = source[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但以上有几个问题。</p><ol><li>没有对参数做检验</li><li>判断是否对象的逻辑不够严谨</li><li>没有考虑数组的兼容</li><li>源对象内部 <code>循环引用</code> 的问题</li><li>当对象中有 <code>undefined</code> , <code>functionn</code> , <code>symbol</code> 等数据类型的时，没有对其做处理</li></ol><p><strong><a href="https://github.com/lodash/lodash/blob/master/.internal/baseClone.js" target="_blank" rel="noopener">lodash深拷贝的实现</a></strong></p><p><strong><a href="https://juejin.im/post/5b9b30a35188255c6418e67c" target="_blank" rel="noopener">深入探究Immutable.js的实现机制（一）</a></strong><a href="https://juejin.im/post/5ba4a6b75188255ca1537b19" target="_blank" rel="noopener">深入探究Immutable.js的实现机制（二）</a></p><h3 id="Typed-Array"><a href="#Typed-Array" class="headerlink" title="Typed Array"></a>Typed Array</h3><p><code>TypedArray</code> 对象描述一个底层的二进制数据缓存区的一个类似数组（array-like）视图。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noopener">TypedArray</a></p><h3 id="0-2-0-1-不等于-0-3-问题（浮点数精度）"><a href="#0-2-0-1-不等于-0-3-问题（浮点数精度）" class="headerlink" title="0.2 + 0.1 不等于 0.3 问题（浮点数精度）"></a>0.2 + 0.1 不等于 0.3 问题（浮点数精度）</h3><p>Javascript 使用 Number 类型表示数字（整数和浮点数），遵循 <code>IEEE754</code> 标准通过64位来表示一个数字。</p><p>在计算时，计算机无法直接对十进制的数字进行运算，所以先按照 <code>IEEE754</code> 的标准转化成相应的二进制，然后进行对阶运算。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 0.1 和 0.2 都转化成二进制后再进行运算</span><br><span class="line">0.00011001100110011001100110011001100110011001100110011010 +</span><br><span class="line">0.0011001100110011001100110011001100110011001100110011010 =</span><br><span class="line">0.0100110011001100110011001100110011001100110011001100111</span><br><span class="line"></span><br><span class="line">// 转成十进制正好是 0.30000000000000004</span><br></pre></td></tr></table></figure><p>精度损失可能出现在进制转化和对阶运算过程中，只要在这两步中产生了精度损失，计算结果就会出现偏差。</p><p><a href="https://github.com/camsong/blog/issues/9" target="_blank" rel="noopener">JavaScript 浮点数陷阱及解法</a></p><h3 id="什么是-iterator-？for-of-？"><a href="#什么是-iterator-？for-of-？" class="headerlink" title="什么是 iterator ？for of ？"></a>什么是 iterator ？for of ？</h3><p>遍历器（Iterator）是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。</p><p>Iterator 的作用有三个：一是为各种数据结构，提供一个统一的、简便的访问接口；二是使得数据结构的成员能够按某种次序排列；三是 ES6 创造了一种新的遍历命令 <code>for...of</code> 循环，Iterator 接口主要供 <code>for...of</code> 消费。</p><p>Iterator 的遍历过程是这样的。</p><p>（1）创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象。</p><p>（2）第一次调用指针对象的 <code>next</code> 方法，可以将指针指向数据结构的第一个成员。</p><p>（3）第二次调用指针对象的 <code>next</code> 方法，指针就指向数据结构的第二个成员。</p><p>（4）不断调用指针对象的 <code>next</code> 方法，直到它指向数据结构的结束位置。</p><p>一个数据结构只要部署了 <code>Symbol.iterator</code> 属性，就被视为具有 iterator 接口，就可以用 <code>for...of</code>循环遍历它的成员。也就是说，<code>for...of</code> 循环内部调用的是数据结构的 <code>Symbol.iterator</code> 方法。</p><p><code>for...of</code> 循环可以使用的范围包括数组、Set 和 Map 结构、某些类似数组的对象（比如 <code>arguments</code> 对象、DOM NodeList 对象）、Generator 对象，以及字符串。</p><p><a href="http://es6.ruanyifeng.com/#docs/iterator" target="_blank" rel="noopener">Iterator 和 for…of 循环</a></p><h3 id="es6-其他特性用过吗？（Class、Map、Set、Decorator-等分别考察）"><a href="#es6-其他特性用过吗？（Class、Map、Set、Decorator-等分别考察）" class="headerlink" title="es6 其他特性用过吗？（Class、Map、Set、Decorator 等分别考察）"></a>es6 其他特性用过吗？（Class、Map、Set、Decorator 等分别考察）</h3><p><a href="http://es6.ruanyifeng.com/#README" target="_blank" rel="noopener">阮一峰《ECMAScript6 入 门》</a></p><h3 id="promise-实现原理（怎么实现-promise-all、race、finally-等？）"><a href="#promise-实现原理（怎么实现-promise-all、race、finally-等？）" class="headerlink" title="promise 实现原理（怎么实现 promise all、race、finally 等？）"></a>promise 实现原理（怎么实现 promise all、race、finally 等？）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise.all</span></span><br><span class="line"><span class="built_in">Promise</span>.all = <span class="function"><span class="keyword">function</span> (<span class="params">promiseFns</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> values = [];</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> [i, p] <span class="keyword">of</span> promiseFns.entries()) &#123;</span><br><span class="line">      <span class="keyword">this</span>.resolve(p).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        values[i] = res;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">if</span> (count === promiseFns.length) resolve(values)</span><br><span class="line">      &#125;, err =&gt; &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Promise.race</span></span><br><span class="line"><span class="built_in">Promise</span>.race = <span class="function"><span class="keyword">function</span> (<span class="params">promiseFns</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> p <span class="keyword">of</span> promiseFns) &#123;</span><br><span class="line">      <span class="keyword">this</span>.resolve(p).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(res)</span><br><span class="line">      &#125;, err =&gt; &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Promise.finally</span></span><br><span class="line"><span class="built_in">Promise</span>.prototype.finally = <span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.then(</span><br><span class="line">    value =&gt; <span class="built_in">Promise</span>.resolve(cb()).then(<span class="function"><span class="params">()</span> =&gt;</span> value),</span><br><span class="line">    reason =&gt; <span class="built_in">Promise</span>.resolve(cb()).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="keyword">throw</span> reason &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/xieranmaya/blog/issues/3" target="_blank" rel="noopener">剖析Promise内部结构</a></p><h3 id="Generator-又是什么？"><a href="#Generator-又是什么？" class="headerlink" title="Generator 又是什么？"></a>Generator 又是什么？</h3><p>是 ES6 提供的一种异步编程解决方案，执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。</p><h3 id="async-await-知识点（await-的作用，async-返回的是什么）"><a href="#async-await-知识点（await-的作用，async-返回的是什么）" class="headerlink" title="async await 知识点（await 的作用，async 返回的是什么）"></a>async await 知识点（await 的作用，async 返回的是什么）</h3><p><code>async</code> 函数是 Generator 函数的语法糖。</p><p>异步变成解决方案，以同步方式写异步代码。</p><p><code>async</code> 函数对 Generator 函数的改进，体现在以下四点。</p><ol><li>内置执行器</li><li>更好的语义</li><li>更广的适用性</li><li>async 返回值是 Promise</li></ol><h3 id="event-loop"><a href="#event-loop" class="headerlink" title="event loop"></a>event loop</h3><p><a href="https://juejin.im/post/5aab2d896fb9a028b86dc2fd" target="_blank" rel="noopener">参考</a></p><h3 id="输入-URL，浏览器的执行过程又是怎么样的？"><a href="#输入-URL，浏览器的执行过程又是怎么样的？" class="headerlink" title="输入 URL，浏览器的执行过程又是怎么样的？"></a>输入 URL，浏览器的执行过程又是怎么样的？</h3><p><a href="https://segmentfault.com/a/1190000013662126?from=timeline" target="_blank" rel="noopener">参考</a></p><h3 id="v8-垃圾回收机制"><a href="#v8-垃圾回收机制" class="headerlink" title="v8 垃圾回收机制"></a>v8 垃圾回收机制</h3><p><a href="https://yuchengkai.cn/docs/frontend/#v8-%E4%B8%8B%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6" target="_blank" rel="noopener">参考</a></p><h3 id="堆、栈、队列是什么？都有什么区别？有什么应用？"><a href="#堆、栈、队列是什么？都有什么区别？有什么应用？" class="headerlink" title="堆、栈、队列是什么？都有什么区别？有什么应用？"></a>堆、栈、队列是什么？都有什么区别？有什么应用？</h3><p>在 JS 中，栈内存一般储存基础数据类型，堆内存一般储存引用数据类型。</p><p>对象放在 heap（堆）里，常见的基础类型和函数放在 stack（栈）里，函数执行的时候在栈里执行。</p><p>队列是先进先出的一种数据结构。栈和队列都可以用数组模拟。</p><p>栈：</p><ul><li>存储基础数据类型</li><li>按值访问</li><li>存储的值大小固定</li><li>由系统自动分配内存空间</li><li>空间小，运行效率高</li><li>先进后出，后进先出</li></ul><p>堆:</p><ul><li>存储引用数据类型</li><li>按引用访问</li><li>存储的值大小不定，可动态调整</li><li>主要用来存放对象</li><li>空间大，但是运行效率相对较低</li><li>无序存储，可根据引用直接获取</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;防抖和节流&quot;&gt;&lt;a href=&quot;#防抖和节流&quot; class=&quot;headerlink&quot; title=&quot;防抖和节流&quot;&gt;&lt;/a&gt;防抖和节流&lt;/h3&gt;&lt;h4 id=&quot;防抖&quot;&gt;&lt;a href=&quot;#防抖&quot; class=&quot;headerlink&quot; title=&quot;防抖&quot;&gt;&lt;/a&gt;防抖&lt;/h4&gt;&lt;p&gt;触发高频事件后 n 秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 这个是用来获取当前时间戳的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;now&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; +&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 防抖函数，返回函数连续调用时，空闲时间必须大于或等于 wait，func 才会执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @param  &amp;#123;function&amp;#125; func        回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @param  &amp;#123;number&amp;#125;   wait        表示时间窗口的间隔&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @param  &amp;#123;boolean&amp;#125;  immediate   设置为ture时，是否立即调用函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @return &amp;#123;function&amp;#125;             返回客户调用函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;debounce&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;func, wait = &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;, immediate = true&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; timer, context, args&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 延迟执行函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; later = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 延迟函数执行完毕，清空缓存的定时器序号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    timer = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 延迟执行的情况下，函数会在延迟函数中执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 使用到之前缓存的参数和上下文&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!immediate) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      func.apply(context, args)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      context = args = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;, wait)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 这里返回的函数是每次实际调用的函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;...params&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 如果没有创建延迟执行函数（later），就创建一个&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!timer) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      timer = later()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 如果是立即执行，调用函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 否则缓存参数和调用上下文&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (immediate) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        func.apply(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, params)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        context = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        args = params&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 如果已有延迟执行函数（later），调用的时候清除原来的并重新设定一个&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 这样做延迟函数会重新计时&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      clearTimeout(timer)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      timer = later()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="front-end" scheme="http://yoursite.com/categories/front-end/"/>
    
    
  </entry>
  
  <entry>
    <title>webpack-concept</title>
    <link href="http://yoursite.com/2019/05/20/webpack-concept/"/>
    <id>http://yoursite.com/2019/05/20/webpack-concept/</id>
    <published>2019-05-20T03:18:54.000Z</published>
    <updated>2019-05-20T03:24:21.041Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Entry-Output"><a href="#Entry-Output" class="headerlink" title="Entry/Output"></a>Entry/Output</h2><h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><p><strong>entry</strong> 指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的，默认值是 <code>./src/index.js</code>。</p><h3 id="出口"><a href="#出口" class="headerlink" title="出口"></a>出口</h3><p><strong>output</strong> 属性告诉 webpack 在哪里输出它所创建的 bundle，以及如何命名这些文件。主要输出文件的默认值是 <code>./dist/main.js</code>，其他生成文件默认放置在 <code>./dist</code> 文件夹中。</p><a id="more"></a><h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><p>loader 用于对模块的源代码进行转换。loader 可以使你在 <code>import</code> 或”加载”模块时预处理文件。因此，loader 类似于其他构建工具中“任务（task）”，并提供了处理前端构建步骤的强大方法。loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript 或将内联图像转换为 data URL。loader 甚至允许你直接在 JavaScript 模块中 import CSS文件！</p><p><code>module.rules</code> 允许在 webpack 配置中指定多个 loader。 这种方式是展示 loader 的一种简明方式，并且有助于使代码变得简洁和易于维护。loader 从右到左地取值（evaluate）/执行（execute）。</p><h2 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h2><p>插件是 webpack 的强大功能。webpack 自身也是构建于，在 webpack 配置中用到的相同的插件系统之上！</p><p>插件目的在于解决 loader 无法实现的其他事。</p><h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><p>webpack-dev-server 是 webpack 官方提供的一个小型 Express 服务器。使用它可以为 webpack 打包生成的资源文件提供 web 服务。</p><p>webpack-dev-server 主要提供两个功能：</p><ul><li>为静态文件提供服务</li><li>自动刷新和热替换（HMR）</li></ul><h2 id="tree-shaking"><a href="#tree-shaking" class="headerlink" title="tree-shaking"></a>tree-shaking</h2><p>tree shaking 是一个术语，通常用于描述移除 JavaScript 上下文中的未引用代码(dead-code)。它依赖于 ES2015 模块语法的<code>静态结构</code>特性。</p><h2 id="code-splitting"><a href="#code-splitting" class="headerlink" title="code splitting"></a>code splitting</h2><p>代码分离是 webpack 中最引人注目的特性之一。此特性能够把代码分离到不同的 bundle 中，然后可以按需加载或并行加载这些文件。代码分离可以用于获取更小的 bundle，以及控制资源加载优先级，如果使用合理，会极大影响加载时间。</p><h2 id="compare-rollup"><a href="#compare-rollup" class="headerlink" title="compare rollup"></a>compare rollup</h2><p>Rollup 的开发理念是利用 ES2015 模块的巧妙设计，尽可能高效地构建精简且易分发的 JavaScript 库。而其它的模块打包器（包括 Webpack在内）都是通过将模块分别封装进函数中，然将这些函数通过能在浏览器中实现的 require 方法打包，最后依次处理这些函数。在你需要实现按需加载的时候，这种做法非常的方便，但是这样做引入了很多无关代码，比较浪费资源。</p><p>在开发应用时使用 Webpack，开发库时使用 Rollup。</p><h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><p>webpack4 提供了 <code>mode</code> 选项，告知 webpack 使用相应环境的内置优化， 有这三个值，<code>none</code> , <code>development</code> , <code>production</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Entry-Output&quot;&gt;&lt;a href=&quot;#Entry-Output&quot; class=&quot;headerlink&quot; title=&quot;Entry/Output&quot;&gt;&lt;/a&gt;Entry/Output&lt;/h2&gt;&lt;h3 id=&quot;入口&quot;&gt;&lt;a href=&quot;#入口&quot; class=&quot;headerlink&quot; title=&quot;入口&quot;&gt;&lt;/a&gt;入口&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;entry&lt;/strong&gt; 指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的，默认值是 &lt;code&gt;./src/index.js&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;出口&quot;&gt;&lt;a href=&quot;#出口&quot; class=&quot;headerlink&quot; title=&quot;出口&quot;&gt;&lt;/a&gt;出口&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;output&lt;/strong&gt; 属性告诉 webpack 在哪里输出它所创建的 bundle，以及如何命名这些文件。主要输出文件的默认值是 &lt;code&gt;./dist/main.js&lt;/code&gt;，其他生成文件默认放置在 &lt;code&gt;./dist&lt;/code&gt; 文件夹中。&lt;/p&gt;
    
    </summary>
    
      <category term="webpack" scheme="http://yoursite.com/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>window.print -&gt; 浏览器打印</title>
    <link href="http://yoursite.com/2019/05/14/practice/window.print/"/>
    <id>http://yoursite.com/2019/05/14/practice/window.print/</id>
    <published>2019-05-14T02:49:38.000Z</published>
    <updated>2019-05-20T03:24:36.245Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>这是一个 <code>React</code> 单页项目。</p><p>需求是需要打印页面的某一部分内容。</p><p>之前是别人写的，具体办法是将该部分内容取出来，通过 <code>document.innerHTML = 打印内容</code> ， 然后调用 <code>window.print</code> 方法，最后是通过 <code>location.reload</code> 刷新页面。</p><p>但由于打印操作结束后，需要刷新页面，对用户体验不好，故此放弃这种方法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'preview'</span>&gt;</span>打印内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.innerHTML = <span class="built_in">document</span>.getElementById(<span class="string">'preview'</span>).innerHTML;</span><br><span class="line"><span class="built_in">window</span>.print();</span><br><span class="line">location.reload();</span><br></pre></td></tr></table></figure><p><strong>注：</strong></p><p>为什么不将 <code>document.body</code> 先赋值给个变量，等打印结束后再重新赋值给 <code>document.body</code> ？</p><p>这是因为，在 <code>React</code> 组件上声明的事件最终绑定到了 <code>document</code> 这个 <code>dom</code> 节点上。所以将 <code>document.body</code> 先赋值给个变量之后再赋值给 <code>document.body</code>，实际上已经没有了 <code>React 事件</code> ，之后的页面操作都将无效。</p><a id="more"></a><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>我的解决思路是，新建一个浏览器窗口，将内容和样式都复制到新的窗口上进行打印。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建一个浏览器窗口</span></span><br><span class="line"><span class="keyword">const</span> printViewWin = <span class="built_in">window</span>.open(<span class="string">''</span>, <span class="string">'printView'</span>);</span><br><span class="line"><span class="comment">// 得到打印内容</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="keyword">this</span>.createPrintHtml();</span><br><span class="line"><span class="comment">// 通过 document.write 将内容写入到文档中</span></span><br><span class="line">printViewWin.document.write(str);</span><br><span class="line"><span class="comment">// 关闭向当前文档的数据写入</span></span><br><span class="line">printViewWin.document.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 因为使用的 webpack ，所以会有生产和开发环境</span></span><br><span class="line"><span class="comment"> * 在开发环境中，所有的样式都将以 &lt;style&gt; 的形式展示</span></span><br><span class="line"><span class="comment"> * 而在生成环境中，则将样式分类到不同的 &lt;link&gt; 中</span></span><br><span class="line"><span class="comment"> * 并且需要用到 window.onload</span></span><br><span class="line"><span class="comment"> * 这是因为需要等待 link 的样式文件下载完成后才可以去执行 window.print，不然没有打印样式</span></span><br><span class="line"><span class="comment"> * window.print 能阻塞页面其他操作</span></span><br><span class="line"><span class="comment"> * 点击 取消/打印，关闭该页面，返回原页面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPrintHtml</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> str</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'"development"'</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取全部 &lt;style&gt;</span></span><br><span class="line">    str = <span class="string">"&lt;!DOCTYPE html&gt;&lt;head&gt;&lt;meta charset='utf-8'&gt;"</span> + </span><br><span class="line">      <span class="string">'&lt;script&gt;window.onload=function()&#123;window.print();window.close()&#125;&lt;/script&gt;'</span> + </span><br><span class="line">      <span class="string">'&lt;style&gt;'</span> +</span><br><span class="line">      <span class="built_in">Array</span>.from(<span class="built_in">window</span>.document.querySelectorAll(<span class="string">'style'</span>)).map(<span class="function"><span class="params">n</span> =&gt;</span> n.innerText).join(<span class="string">''</span>) +</span><br><span class="line">      <span class="string">'&lt;/style&gt;&lt;/head&gt;&lt;body&gt;'</span> +</span><br><span class="line">      <span class="built_in">window</span>.document.getElementById(<span class="string">'preview'</span>).innerHTML +</span><br><span class="line">      <span class="string">'&lt;/body&gt;&lt;/html&gt;'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 获取全部 &lt;linkn&gt;</span></span><br><span class="line">    str = <span class="string">"&lt;!DOCTYPE html&gt;&lt;head&gt;&lt;meta charset='utf-8'&gt;"</span> + </span><br><span class="line">      <span class="string">'&lt;script&gt;window.onload=function()&#123;window.print();window.close()&#125;&lt;/script&gt;'</span> +</span><br><span class="line">      <span class="built_in">window</span>.document.head.innerHTML.match(<span class="regexp">/href="(.*?)"/gi</span>).filter(<span class="function"><span class="params">_</span> =&gt;</span> _.endsWith(<span class="string">'css"'</span>)).map(<span class="function"><span class="params">n</span> =&gt;</span> n.slice(<span class="number">6</span>)).map(<span class="function"><span class="params">n</span> =&gt;</span> n.slice(<span class="number">0</span>, <span class="number">-1</span>)).map(<span class="function"><span class="params">_</span> =&gt;</span> <span class="string">`&lt;link rel="stylesheet" type="text/css" href="<span class="subst">$&#123;location.origin + _&#125;</span>" &gt;`</span>).join(<span class="string">''</span>) +</span><br><span class="line">      <span class="string">'&lt;/head&gt;&lt;body&gt;'</span> +</span><br><span class="line">      <span class="built_in">window</span>.document.getElementById(<span class="string">'preview'</span>).innerHTML +</span><br><span class="line">      <span class="string">'&lt;/body&gt;&lt;/html&gt;'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>为什么不使用 <code>ref</code> 来获取打印内？</p><p>可以使用。但还是直接获取 <code>dom</code> 节点 。因为在这个需求中，只需要得到打印内容，不需要对组件进行其他操作。</p><p><code>document.write</code> 可以将写入的字符中按 <code>HTML</code> 解析，然后需要手动关闭文档流。</p><p><code>document.write</code> 的使用问题？</p><p>在此场景中，<code>document.write</code> 可以去使用。但也可以使用 <code>appendChild</code> 等方法，将样式和内容注入到新窗口的文档中。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;这是一个 &lt;code&gt;React&lt;/code&gt; 单页项目。&lt;/p&gt;
&lt;p&gt;需求是需要打印页面的某一部分内容。&lt;/p&gt;
&lt;p&gt;之前是别人写的，具体办法是将该部分内容取出来，通过 &lt;code&gt;document.innerHTML = 打印内容&lt;/code&gt; ， 然后调用 &lt;code&gt;window.print&lt;/code&gt; 方法，最后是通过 &lt;code&gt;location.reload&lt;/code&gt; 刷新页面。&lt;/p&gt;
&lt;p&gt;但由于打印操作结束后，需要刷新页面，对用户体验不好，故此放弃这种方法。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;preview&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;打印内容&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.innerHTML = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;preview&#39;&lt;/span&gt;).innerHTML;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.print();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;location.reload();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为什么不将 &lt;code&gt;document.body&lt;/code&gt; 先赋值给个变量，等打印结束后再重新赋值给 &lt;code&gt;document.body&lt;/code&gt; ？&lt;/p&gt;
&lt;p&gt;这是因为，在 &lt;code&gt;React&lt;/code&gt; 组件上声明的事件最终绑定到了 &lt;code&gt;document&lt;/code&gt; 这个 &lt;code&gt;dom&lt;/code&gt; 节点上。所以将 &lt;code&gt;document.body&lt;/code&gt; 先赋值给个变量之后再赋值给 &lt;code&gt;document.body&lt;/code&gt;，实际上已经没有了 &lt;code&gt;React 事件&lt;/code&gt; ，之后的页面操作都将无效。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Koa系列-Session：koa-session</title>
    <link href="http://yoursite.com/2019/05/08/koa/koa-session/"/>
    <id>http://yoursite.com/2019/05/08/koa/koa-session/</id>
    <published>2019-05-08T01:50:54.000Z</published>
    <updated>2019-05-08T08:06:58.299Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">opts, app</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断参数类型</span></span><br><span class="line">  <span class="keyword">if</span> (opts &amp;&amp; <span class="keyword">typeof</span> opts.use === <span class="string">'function'</span>) &#123;</span><br><span class="line">    [ app, opts ] = [ opts, app ];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!app || <span class="keyword">typeof</span> app.use !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'app instance required: `session(opts, app)`'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 格式化选项</span></span><br><span class="line">  opts = formatOpts(opts);</span><br><span class="line">  <span class="comment">// 将 ContextSession 实例挂载到 app.context 上, session 和 sessionOptions 属性也挂载到 app.context</span></span><br><span class="line">  <span class="comment">// 在操作过程中，使用的是 ctx.session ，实际上是对 ContextSession 实例的操作</span></span><br><span class="line">  extendContext(app.context, opts);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">session</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 实例 ContextSession</span></span><br><span class="line">    <span class="keyword">const</span> sess = ctx[CONTEXT_SESSION];</span><br><span class="line">    <span class="comment">// 判断是否使用外部的 store</span></span><br><span class="line">    <span class="keyword">if</span> (sess.store) <span class="keyword">await</span> sess.initFromExternal();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> next();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (opts.autoCommit) &#123;</span><br><span class="line">        <span class="keyword">await</span> sess.commit();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><p>当设置了 <code>ctx.session.views = 1</code> 时，</p><p>在类 <code>ContextSession</code>中即 <code>set</code> 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置 session 的值</span></span><br><span class="line">set(val) &#123;</span><br><span class="line">  <span class="comment">// 当val === null 的情况下，清空 session</span></span><br><span class="line">  <span class="keyword">if</span> (val === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.session = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> val === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="comment">// use the original `externalKey` if exists to avoid waste storage</span></span><br><span class="line">    <span class="keyword">this</span>.create(val, <span class="keyword">this</span>.externalKey);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'this.session can only be set as null or an object.'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类 <code>ContextSession</code> ，方法 <code>get</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">get() &#123;</span><br><span class="line">  <span class="keyword">const</span> session = <span class="keyword">this</span>.session;</span><br><span class="line">  <span class="comment">// 已经存在</span></span><br><span class="line">  <span class="keyword">if</span> (session) <span class="keyword">return</span> session;</span><br><span class="line">  <span class="comment">// 没有设置</span></span><br><span class="line">  <span class="keyword">if</span> (session === <span class="literal">false</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// cookie session store</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.store) <span class="keyword">this</span>.initFromCookie();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.session;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类 <code>ContextSession</code> ，方法 <code>create</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create(val, externalKey) &#123;</span><br><span class="line">  debug(<span class="string">'create session with val: %j externalKey: %s'</span>, val, externalKey);</span><br><span class="line">  <span class="comment">// 如果需要外部存储库，如 Redis, MongoDB 或者 DBs ，需要一个外部的key</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.store) <span class="keyword">this</span>.externalKey = externalKey || <span class="keyword">this</span>.opts.genid();</span><br><span class="line">  <span class="comment">// 一旦重新设置了 会话状态 ,就会实例一个 Session，这个才是用来操作 会话状态</span></span><br><span class="line">  <span class="keyword">this</span>.session = <span class="keyword">new</span> Session(<span class="keyword">this</span>, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类 <code>Session</code> 会话状态模型的作用是操作 会话状态值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Session</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(sessionContext, obj) &#123;</span><br><span class="line">    <span class="comment">// ContextSession实例</span></span><br><span class="line">    <span class="keyword">this</span>._sessCtx = sessionContext;</span><br><span class="line">    <span class="comment">// ctx</span></span><br><span class="line">    <span class="keyword">this</span>._ctx = sessionContext.ctx;</span><br><span class="line">    <span class="comment">// 如果没有值，则是第一次的情况</span></span><br><span class="line">    <span class="keyword">if</span> (!obj) &#123;</span><br><span class="line">      <span class="keyword">this</span>.isNew = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 筛选值</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="comment">// restore maxAge from store</span></span><br><span class="line">        <span class="keyword">if</span> (k === <span class="string">'_maxAge'</span>) <span class="keyword">this</span>._ctx.sessionOptions.maxAge = obj._maxAge;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (k === <span class="string">'_session'</span>) <span class="keyword">this</span>._ctx.sessionOptions.maxAge = <span class="string">'session'</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">this</span>[k] = obj[k];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类 <code>ContextSession</code> ，方法 <code>initFromCookie</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化 session 从 cookie 上</span></span><br><span class="line">initFromCookie() &#123;</span><br><span class="line">  debug(<span class="string">'init from cookie'</span>);</span><br><span class="line">  <span class="keyword">const</span> ctx = <span class="keyword">this</span>.ctx;</span><br><span class="line">  <span class="keyword">const</span> opts = <span class="keyword">this</span>.opts;</span><br><span class="line">  <span class="comment">// koa的方法</span></span><br><span class="line">  <span class="keyword">const</span> cookie = ctx.cookies.get(opts.key, opts);</span><br><span class="line">  <span class="comment">// 不存在去创建</span></span><br><span class="line">  <span class="keyword">if</span> (!cookie) &#123;</span><br><span class="line">    <span class="keyword">this</span>.create();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> json;</span><br><span class="line">  debug(<span class="string">'parse %s'</span>, cookie);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 解析 cookie</span></span><br><span class="line">    json = opts.decode(cookie);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    debug(<span class="string">'decode %j error: %s'</span>, cookie, err);</span><br><span class="line">    <span class="keyword">if</span> (!(err <span class="keyword">instanceof</span> <span class="built_in">SyntaxError</span>)) &#123;</span><br><span class="line">      <span class="comment">// 清空 cookie 以防下次请求不在出错</span></span><br><span class="line">      ctx.cookies.set(opts.key, <span class="string">''</span>, opts);</span><br><span class="line">      <span class="comment">// ctx.onerror will unset all headers, and set those specified in err</span></span><br><span class="line">      err.headers = &#123;</span><br><span class="line">        <span class="string">'set-cookie'</span>: ctx.response.get(<span class="string">'set-cookie'</span>),</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.create();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  debug(<span class="string">'parsed %j'</span>, json);</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.valid(json)) &#123;</span><br><span class="line">    <span class="keyword">this</span>.create();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.create(json);</span><br><span class="line">  <span class="keyword">this</span>.prevHash = util.hash(<span class="keyword">this</span>.session.toJSON());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有三个比较重要的方法</p><p>类 <code>ContextSession</code> ，方法 <code>commit</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> commit() &#123;</span><br><span class="line">  <span class="keyword">const</span> session = <span class="keyword">this</span>.session;</span><br><span class="line">  <span class="keyword">const</span> opts = <span class="keyword">this</span>.opts;</span><br><span class="line">  <span class="keyword">const</span> ctx = <span class="keyword">this</span>.ctx;</span><br><span class="line">  <span class="comment">// 不被允许</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">undefined</span> === session) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 移除 session</span></span><br><span class="line">  <span class="keyword">if</span> (session === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">this</span>.remove();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> reason = <span class="keyword">this</span>._shouldSaveSession();</span><br><span class="line">  debug(<span class="string">'should save session: %s'</span>, reason);</span><br><span class="line">  <span class="keyword">if</span> (!reason) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> opts.beforeSave === <span class="string">'function'</span>) &#123;</span><br><span class="line">    debug(<span class="string">'before save'</span>);</span><br><span class="line">    opts.beforeSave(ctx, session);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> changed = reason === <span class="string">'changed'</span>;</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">this</span>.save(changed);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类 <code>ContextSession</code> ，方法 <code>_shouldSaveSession</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据规则，判断是否需要存储 session</span></span><br><span class="line">_shouldSaveSession() &#123;</span><br><span class="line">  <span class="keyword">const</span> prevHash = <span class="keyword">this</span>.prevHash;</span><br><span class="line">  <span class="keyword">const</span> session = <span class="keyword">this</span>.session;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 强制存储</span></span><br><span class="line">  <span class="keyword">if</span> (session._requireSave) <span class="keyword">return</span> <span class="string">'force'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 是新的用户的并且是没有被操作过的就不做任何事</span></span><br><span class="line">  <span class="keyword">const</span> json = session.toJSON();</span><br><span class="line">  <span class="keyword">if</span> (!prevHash &amp;&amp; !<span class="built_in">Object</span>.keys(json).length) <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果 session 已经改变就去存储</span></span><br><span class="line">  <span class="keyword">const</span> changed = prevHash !== util.hash(json);</span><br><span class="line">  <span class="keyword">if</span> (changed) <span class="keyword">return</span> <span class="string">'changed'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  如果已设置 opts.rolling，就去存储</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.opts.rolling) <span class="keyword">return</span> <span class="string">'rolling'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果 opts.renew 和 session 将要到期，就去存储</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.opts.renew) &#123;</span><br><span class="line">    <span class="keyword">const</span> expire = session._expire;</span><br><span class="line">    <span class="keyword">const</span> maxAge = session.maxAge;</span><br><span class="line">    <span class="keyword">if</span> (expire &amp;&amp; maxAge &amp;&amp; expire - <span class="built_in">Date</span>.now() &lt; maxAge / <span class="number">2</span>) <span class="keyword">return</span> <span class="string">'renew'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类 <code>ContextSession</code> ，方法 <code>save</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> save(changed) &#123;</span><br><span class="line">  <span class="keyword">const</span> opts = <span class="keyword">this</span>.opts;</span><br><span class="line">  <span class="keyword">const</span> key = opts.key;</span><br><span class="line">  <span class="keyword">const</span> externalKey = <span class="keyword">this</span>.externalKey;</span><br><span class="line">  <span class="keyword">let</span> json = <span class="keyword">this</span>.session.toJSON();</span><br><span class="line">  <span class="comment">// 检查是否到期</span></span><br><span class="line">  <span class="keyword">let</span> maxAge = opts.maxAge ? opts.maxAge : ONE_DAY;</span><br><span class="line">  <span class="keyword">if</span> (maxAge === <span class="string">'session'</span>) &#123;</span><br><span class="line">    opts.maxAge = <span class="literal">undefined</span>;</span><br><span class="line">    json._session = <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    json._expire = maxAge + <span class="built_in">Date</span>.now();</span><br><span class="line">    json._maxAge = maxAge;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 存储外部的store</span></span><br><span class="line">  <span class="keyword">if</span> (externalKey) &#123;</span><br><span class="line">    debug(<span class="string">'save %j to external key %s'</span>, json, externalKey);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> maxAge === <span class="string">'number'</span>) &#123;</span><br><span class="line">      <span class="comment">// 确保 store的过期时间</span></span><br><span class="line">      maxAge += <span class="number">10000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">this</span>.store.set(externalKey, json, maxAge, &#123;</span><br><span class="line">      changed,</span><br><span class="line">      rolling: opts.rolling,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (opts.externalKey) &#123;</span><br><span class="line">      opts.externalKey.set(<span class="keyword">this</span>.ctx, externalKey);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.ctx.cookies.set(key, externalKey, opts);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  debug(<span class="string">'save %j to cookie'</span>, json);</span><br><span class="line">  json = opts.encode(json);</span><br><span class="line">  debug(<span class="string">'save %s'</span>, json);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.ctx.cookies.set(key, json, opts);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结一下：</p><p>这是一个管理会话状态的一个 <code>Koa</code> 中间件，并且可以引入其他的存储方式，如 <code>Redis</code> 和 <code>MongoDB</code> 等。</p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;opts, app&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 判断参数类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (opts &amp;amp;&amp;amp; &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; opts.use === &lt;span class=&quot;string&quot;&gt;&#39;function&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [ app, opts ] = [ opts, app ];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!app || &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; app.use !== &lt;span class=&quot;string&quot;&gt;&#39;function&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;TypeError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;app instance required: `session(opts, app)`&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 格式化选项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  opts = formatOpts(opts);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 将 ContextSession 实例挂载到 app.context 上, session 和 sessionOptions 属性也挂载到 app.context&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 在操作过程中，使用的是 ctx.session ，实际上是对 ContextSession 实例的操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  extendContext(app.context, opts);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;session&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;ctx, next&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 实例 ContextSession&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; sess = ctx[CONTEXT_SESSION];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 判断是否使用外部的 store&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sess.store) &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; sess.initFromExternal();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; next();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; err;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (opts.autoCommit) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; sess.commit();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Koa" scheme="http://yoursite.com/categories/Koa/"/>
    
    
      <category term="koa" scheme="http://yoursite.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>css基本知识</title>
    <link href="http://yoursite.com/2019/05/06/front-end/css/"/>
    <id>http://yoursite.com/2019/05/06/front-end/css/</id>
    <published>2019-05-06T03:22:21.000Z</published>
    <updated>2019-05-08T06:06:26.292Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CSS盒模型"><a href="#CSS盒模型" class="headerlink" title="CSS盒模型"></a>CSS盒模型</h3><p>盒模型分为 W3C 标准盒模型和 IE 盒模型。</p><h4 id="W3C标准盒模型"><a href="#W3C标准盒模型" class="headerlink" title="W3C标准盒模型"></a>W3C标准盒模型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">属性 width，height 只包含内容 content，不包含 border 和 padding。</span><br></pre></td></tr></table></figure><h4 id="IE盒模型"><a href="#IE盒模型" class="headerlink" title="IE盒模型"></a>IE盒模型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">属性 width，height 包含 border 和 padding，指的是 content + padding + border。</span><br></pre></td></tr></table></figure><h4 id="box-sizing属性"><a href="#box-sizing属性" class="headerlink" title="box-sizing属性"></a>box-sizing属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">是用来控制元素的盒子模型的解析模式，默认为 content-box</span><br><span class="line">content-box：W3C 的标准盒子模型，设置元素的 height/width 属性指的是 content 部分的高/宽</span><br><span class="line">border-box：IE 传统盒子模型，设置元素的 height/width 属性指的是 content + border + padding 部分的高/宽</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><p>编写页面代码时应尽量使用标准的W3C模型（需在页面中声明 DOCTYPE 类型），这样可以避免多个浏览器对同一页面的不兼容。</p></li><li><p>因为若不声明 DOCTYPE 类型，IE浏览器会将盒子模型解释为 IE 盒子模型，FireFox 等会将其解释为 W3C 盒子模型；若在页面中声明了 DOCTYPE 类型，所有的浏览器都会把盒模型解释为 W3C 盒模型。</p></li></ul><a id="more"></a><h3 id="CSS选择器有哪些？"><a href="#CSS选择器有哪些？" class="headerlink" title="CSS选择器有哪些？"></a>CSS选择器有哪些？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">元素选择器   // elementname（元素名称）</span><br><span class="line">类选择器   // .classname（类名）</span><br><span class="line">ID选择器   // #idname（ID名）</span><br><span class="line">通配选择器   // *</span><br><span class="line">属性选择器   // [属性=值]</span><br><span class="line">相邻兄弟选择器   // A + B</span><br><span class="line">普通兄弟选择器   // A ~ B</span><br><span class="line">子选择器   //  A &gt; B</span><br><span class="line">后代选择器   // A B </span><br><span class="line">伪类选择器   // :hover，:not等</span><br></pre></td></tr></table></figure><p><a href="http://www.stevesouders.com/blog/2009/06/18/simplifying-css-selectors/" target="_blank" rel="noopener">不建议使用通配选择器，因为它是性能最低的一个 CSS 选择器</a></p><h3 id="选择器的优先级"><a href="#选择器的优先级" class="headerlink" title="选择器的优先级"></a>选择器的优先级</h3><p>优先级的计算首先是 <strong>选择器权重</strong> 的优先级计算，然后是 <strong>声明先后顺序</strong> 的优先级计算。</p><p>由于 CSS 来源有多种，所以浏览器需要一种方法来确定哪些样式应该应用于给定的元素。为此，浏览器使用一个名为 特殊性 <strong>（specificity）</strong> 的公式，它计算选择器中使用的标记、类、id 和属性选择器的数值，以及 <code>!important</code> 声明的数值。</p><p>通过内联 <code>style</code> 属性在元素上定义的样式被赋予一个等级，该等级优先于 <code>&lt;style&gt;</code> 块或外部样式表中的任何样式。如果 Web 开发人员使用 <code>!important</code> 某个值，则该值将胜过任何 CSS，无论其位置如何，除非还有 <code>!important</code> 内联。</p><p>同一级别的个数，数量多的优先级高，假设同样即比较下一级别的个数。至于各级别的优先级例如以下：</p><p><strong>!important &gt; 内联 &gt; ID &gt; 类 &gt; 标签 | 伪类 | 属性选择 &gt; 伪对象 &gt; 通配符 &gt; 继承</strong></p><p>选择器的特殊性由选择器本身的组件确定，特殊性值表述为5个部分：</p><p><code>!important</code> ，<code>Style attribute</code> ，<code>ID</code> ，<code>Class,pseudo-class attribute</code> ，<code>Elements</code></p><p>(1)、对于选择器中给定的各个 !important 属性值，加 1，0，0，0，0 。</p><p>(2)、对于元素内联样式 style 属性值，加 0，1，0，0，0 。</p><p>(3)、对于选择器中给定的各个 ID 属性值，加 0，0，1，0，0 。</p><p>(4)、对于选择器中给定的各个类属性值、属性选择器或伪类，加 0，0，0，1，0 。</p><p>(5)、对于选择器中给定的各个元素和伪元素，加 0，0，0，0，1 。伪元素是否具有特殊性？在这方面CSS2有些自相矛盾，不过CSS2.1很清楚的指出，伪元素具有特殊性，而且特殊性为 0，0，0，0，1，同元素特殊性相同。</p><p>(6)、结合符(+ &gt; [] ^= $= 等等特殊符号)和通配符(*)对特殊性没有任何贡献，此外通配符的特殊性为 0，0，0，0，0。全是 0 有什么意义呢？当然有意义！子元素继承祖先元素的样式根本没有特殊性，因此当出现这种情况后，通配符选择器定义的样式声明也要优先于子元素继承来的样式声明。因为就算特殊性是0，也比没有特殊性可言要强。</p><p><strong>注意：</strong></p><p>W3C文档<a href="https://www.w3.org/TR/selectors/#specificity-rules" target="_blank" rel="noopener">选择器权重的计算</a>。</p><pre><code>A selector’s specificity is calculated for a given element as follows:1. count the number of ID selectors in the selector (= A)2. count the number of class selectors, attributes selectors, and pseudo-classes in the selector (= B)3. count the number of type selectors and pseudo-elements in the selector (= C)ignore the universal selectorIf the selector is a selector list, this number is calculated for each selector in the list. For a given matching process against the list, the specificity in effect is that of the most specific selector in the list that matches.</code></pre><h3 id="link引入样式和-import的区别"><a href="#link引入样式和-import的区别" class="headerlink" title="link引入样式和@import的区别"></a>link引入样式和@import的区别</h3><h4 id="从属关系的区别"><a href="#从属关系的区别" class="headerlink" title="从属关系的区别"></a>从属关系的区别</h4><p><code>@import</code> 是 CSS 提供的语法规则，只有导入样式表的作用；<code>link</code> 是 HTML 提供的标签，不仅可以加载 CSS 文件，还可以定义 RSS、rel 连接属性等。</p><h4 id="加载顺序区别"><a href="#加载顺序区别" class="headerlink" title="加载顺序区别"></a>加载顺序区别</h4><p>加载页面时，<code>link</code> 标签引入的 CSS 被同时加载；<code>@import</code> 引入的 CSS 将在页面加载完毕后被加载。</p><h4 id="兼容性区别"><a href="#兼容性区别" class="headerlink" title="兼容性区别"></a>兼容性区别</h4><p><code>@import</code> 是 CSS2.1 才有的语法，故只可在 IE5+ 才能识别；<code>link</code> 标签作为 HTML 元素，不存在兼容性问题。</p><h4 id="DOM可控性区别"><a href="#DOM可控性区别" class="headerlink" title="DOM可控性区别"></a>DOM可控性区别</h4><p>可以通过 JS 操作 DOM ，插入 <code>link</code> 标签来改变样式；由于 DOM 方法是基于文档的，无法使用 <code>@import</code> 的方式插入样式。</p><h4 id="权重区别"><a href="#权重区别" class="headerlink" title="权重区别"></a>权重区别</h4><p><code>link</code> 引入的样式权重大于 <code>@import</code> 引入的样式。</p><h3 id="Flexbox（弹性布局）"><a href="#Flexbox（弹性布局）" class="headerlink" title="Flexbox（弹性布局）"></a>Flexbox（弹性布局）</h3><p>该布局模型的目的是提供一种更加高效的方式来对容器中的条目进行布局、对齐和分配空间。在传统的布局方式中，block 布局是把块在垂直方向从上到下依次排列的；而 inline 布局则是在水平方向来排列。弹性盒布局并没有这样内在的方向限制，可以由开发人员自由操作。</p><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p><p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做 <code>main start</code> ，结束位置叫做 <code>main end</code> ；交叉轴的开始位置叫做 <code>cross start</code> ，结束位置叫做 <code>cross end</code>。</p><p>项目默认沿主轴排列。单个项目占据的主轴空间叫做 <code>main size</code> ，占据的交叉轴空间叫做 <code>cross size</code> 。</p><h4 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h4><p><strong>flex-direction</strong>：决定了主轴的方向，默认值是 row 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">row：主轴方向为水平方向，起点在左端；</span><br><span class="line">row-reverse：主轴方向为水平方向，起点在右端</span><br><span class="line">column：主轴方向为竖直方向，起点在上端</span><br><span class="line">column：主轴方向为竖直方向，起点在下端</span><br></pre></td></tr></table></figure><p><strong>flex-wrap</strong>：决定容器内项目是否可换行，默认值 nowrap 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nowrap：不换行，项目尺寸会随之调整</span><br><span class="line">wrap：超出换行，且第一行在上方</span><br><span class="line">wrap-reverse：超出换行，且第一行在下方</span><br></pre></td></tr></table></figure><p><strong>flex-flow</strong>：是 flex-direction 和 flex-wrap  的简写，其默认值为row nowrap 。</p><p><strong>justify-content</strong>：定义了项目在主轴上的对齐方式，默认值为 flex-start 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flex-start：左对齐</span><br><span class="line">flex-end：右对齐</span><br><span class="line">center：居中</span><br><span class="line">space-between：两端对齐，把剩余空间等分成间隙</span><br><span class="line">space-around：每个项目两侧的间隔相等</span><br></pre></td></tr></table></figure><p><strong>align-items</strong>：定义了项目在交叉轴上的对齐方式，默认值为 stretch 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stretch：如果项目没有设置高度或者为auto，将占满整个容器的高度</span><br><span class="line">flex-start：交叉轴起点对齐</span><br><span class="line">flex-end：交叉轴终点对齐</span><br><span class="line">center：中点对齐</span><br><span class="line">baseline：项目的第一行文字的基线对齐</span><br></pre></td></tr></table></figure><p><strong>container</strong>：定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用，默认值为 stretch 。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flex-start：与交叉轴的起点对齐。</span><br><span class="line">flex-end：与交叉轴的终点对齐。</span><br><span class="line">center：与交叉轴的中点对齐。</span><br><span class="line">space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</span><br><span class="line">space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</span><br><span class="line">stretch：轴线占满整个交叉轴。</span><br></pre></td></tr></table></figure><h4 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h4><p><strong>order</strong>：定义项目在容器中的排列顺序，数值越小排列越靠前，默认值为0。</p><p><strong>flex-basis</strong>：定义了在分配多余空间之前，项目占据主轴空间，浏览器根据这个属性，计算主轴是否有多余空间，默认值为auto，即项目本身的宽高。</p><p><strong>flex-grow</strong>：定义项目的放大比例，默认值为0，即若果存在剩余空间，也不放大。</p><p><strong>flex-shrink</strong>：定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><p><strong>flex</strong>：是 flex-grow 、flex-shrink 、flex-basis 三个属性的缩写。</p><p><strong>align-self</strong>：允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch 。</p><h3 id="grid（网格布局）"><a href="#grid（网格布局）" class="headerlink" title="grid（网格布局）"></a>grid（网格布局）</h3><p>CSS 网格布局引入了二维网格布局系统，可用于布局页面主要的区域布局或小型组件。</p><p>网格是一组相交的水平线和垂直线，它定义了网格的列和行。我们可以将网格元素放置在与这些行和列相关的位置上。</p><p>CSS网格布局具有以下特点：</p><ul><li><p>固定的位置和弹性的轨道的大小节</p></li><li><p>元素位置</p></li><li><p>创建额外的轨道来包含元素</p></li><li><p>对齐控制</p></li><li><p>控制重叠内容</p></li></ul><p>采用网格布局的区域，称为”容器”（container）。容器内部采用网格定位的子元素，称为”项目”（item）。</p><h4 id="容器属性-1"><a href="#容器属性-1" class="headerlink" title="容器属性"></a>容器属性</h4><p><strong>grid-template-columns</strong>：定义每一列的列宽。</p><p><strong>grid-template-rows</strong>：定义每一行的行高。</p><p>（1）<code>repeat</code> 函数，该函数的作用是，简化重复的值，也可以重复某种模式。如： </p><p><code>grid-template-columns: 100px 100px 100px</code> = <code>grid-template-cloumns:repeat(3, 100px)</code> 。</p><p>（2）<code>autofill</code> 关键字，如果希望每一行（或每一列）容纳尽可能多的单元格，这时可以使用auto-fill关键字表示自动填充。如：</p><p>最外层容器宽度 <code>1000px</code> ，<code>grid-template-columns: repeat(autofill ,200px)</code> 。表示每列宽度 <code>200px</code>，然后自动填充，直到容器不能放置更多的列。</p><p>（3）<code>fr</code> 关键字，表示行与列的比例关系，如：</p><p><code>grid-template-columns: 1fr 2fr 1fr</code> 。表示该行分为 <code>3</code> 列。第二列的宽度是第一列和第四列的2倍。</p><p><code>fr</code> 也可以跟长度单位搭配使用，如：</p><p><code>grid-template-cloumns：100px 1fr 2fr</code> 。表示第一行的宽度为 <code>100px</code> ，剩余的宽度，第三行占了 <code>2/3</code> ，第二行占了 <code>1/3</code> 。</p><p>（4）<code>minmax</code> 函数，该函数的作用是产生一个长度范围，表示长度就在这个范围之中。它接受两个参数，分别为最小值和最大值，如：</p><p><code>grid-template-columns: 1fr 1fr minmax(100px, 1fr)</code> 。表示第三列的宽度大于等于 <code>100px</code> ，小与等于 <code>1fr</code> 。</p><p>（5）<code>auto</code> 关键字， 表示由浏览器自己决定长度。</p><p><code>grid-template-columns: 100px auto 100px</code> 。第二列的宽度，基本上等于该列单元格的最大宽度，除非单元格内容设置了 <code>min-width</code> ，且这个值大于最大宽度。</p><p>（6）网格线名称，<code>grid-template-columns</code> 属性和 <code>grid-template-rows</code> 属性里面，还可以使用方括号，指定每一根网格线的名字，方便以后的引用，如：</p><p><code>grid-template-columns: [c1] 100px [c2] 100px [c3] auto</code></p><p><strong>grid-cloumns-gap</strong>：表示列的间距。</p><p><strong>grid-rows-gap</strong>：表示行的间距。</p><p><strong>grid-gap</strong>：<code>grid-column-gap</code> 和 <code>grid-row-gap</code>的合并简写形式，<code>grid-grap: &lt;grid-row-gap&gt; &lt;grid-column-gap&gt;</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">根据最新标准，上面三个属性名的 grid-前缀 已经删除，</span><br><span class="line">grid-column-gap 和 grid-row-gap 写成 column-gap 和 row-gap ，grid-gap 写成 gap 。</span><br><span class="line"></span><br><span class="line">chrome66就已经支持该标准。</span><br></pre></td></tr></table></figure><p><strong>grid-template-area</strong>：用于定义区域。</p><p><strong>grid-auto-flow</strong>：行与列的项目的顺序，默认值为 row。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">row: 先行后列</span><br><span class="line">column：先列后行</span><br><span class="line">row dense 和 column dense：用于某些项目指定位置以后，剩下的项目怎么自动放置。</span><br></pre></td></tr></table></figure><p><strong>justify-items</strong>：设置单元格内容的水平位置（左中右）。</p><p><strong>align-items</strong>：设置单元格内容的垂直位置（上中下）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start：对齐单元格的起始边缘。</span><br><span class="line">end：对齐单元格的结束边缘。</span><br><span class="line">center：单元格内部居中。</span><br><span class="line">stretch：拉伸，占满单元格的整个宽度（默认值）。</span><br></pre></td></tr></table></figure><p><strong>place-items</strong>：属性是 <code>align-items</code> 属性和 <code>justify-items</code> 属性的合并简写形式。</p><p><code>place-items: &lt;align-items&gt; &lt;justify-items&gt;</code> ，如果省略第二个值，则浏览器认为与第一个值相等。</p><p><strong>justify-content</strong>：是整个内容区域在容器里面的水平位置（左中右）。</p><p><strong>align-content</strong>：是整个内容区域的垂直位置（上中下）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">start：对齐容器的起始边框。</span><br><span class="line">end：对齐容器的结束边框。</span><br><span class="line">center：容器内部居中。</span><br><span class="line">stretch：项目大小没有指定时，拉伸占据整个网格容器。</span><br><span class="line">space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍。</span><br><span class="line">space-between：项目与项目的间隔相等，项目与容器边框之间没有间隔。</span><br><span class="line">space-evenly：项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔。</span><br></pre></td></tr></table></figure><p><strong>place-content</strong>：属性是 <code>align-content</code> 属性和 <code>justify-content</code> 属性的合并简写形式。</p><p><code>place-content: &lt;align-content&gt; &lt;justify-content&gt;</code> ，如果省略第二个值，则浏览器认为与第一个值相等。</p><p><strong>grid-auto-columns</strong> 和 <strong>grid-auto-rows</strong> ：</p><p><code>grid-auto-columns</code> 属性和 <code>grid-auto-rows</code> 属性用来设置，浏览器自动创建的多余网格的列宽和行高。<br>它们的写法与 <code>grid-template-columns</code> 和 <code>grid-template-rows</code> 完全相同。<br>如果不指定这两个属性，浏览器完全根据单元格内容的大小，决定新增网格的列宽和行高。</p><p><strong>grid-template</strong>：是 <code>grid-template-columns</code> 、<code>grid-template-rows</code> 和 <code>grid-template-areas</code> 这三个属性的合并简写形式。</p><p><strong>grid</strong>：是 <code>grid-template-rows</code> 、<code>grid-template-columns</code> 、<code>grid-template-areas</code> 、 <code>grid-auto-rows</code> 、<code>grid-auto-columns</code> 、 <code>grid-auto-flow</code> 这六个属性的合并简写形式。</p><h4 id="项目属性-1"><a href="#项目属性-1" class="headerlink" title="项目属性"></a>项目属性</h4><p><strong>grid-column-start</strong> ， <strong>grid-column-end</strong> ， <strong>grid-row-start</strong> ， <strong>grid-row-end</strong> ：</p><p>项目的位置是可以指定的，具体方法就是指定项目的四个边框，分别定位在哪根网格线。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grid-column-start属性：左边框所在的垂直网格线</span><br><span class="line">grid-column-end属性：右边框所在的垂直网格线</span><br><span class="line">grid-row-start属性：上边框所在的水平网格线</span><br><span class="line">grid-row-end属性：下边框所在的水平网格线</span><br></pre></td></tr></table></figure><p>这四个属性的值还可以使用 <code>span</code> 关键字，表示”跨越”，即左右边框（上下边框）之间跨越多少个网格。</p><p>使用这四个属性，如果产生了项目的重叠，则使用 <code>z-index</code> 属性指定项目的重叠顺序。</p><p><strong>grid-column</strong>：是 <code>grid-column-start</code> 和 <code>grid-column-end</code> 的合并简写形式。</p><p><strong>grid-row</strong>：是 <code>grid-row-start</code> 属性和 <code>grid-row-end</code> 的合并简写形式。如何使用，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.item-1 &#123;</span><br><span class="line">  grid-column: 1 / 3;</span><br><span class="line">&#125;</span><br><span class="line">// 表示项目 .item-1 占据从第一根列线和第三个根列线。</span><br></pre></td></tr></table></figure><p>这两个属性之中，也可以使用span关键字，表示跨越多少个网格。</p><p>斜杠以及后面的部分可以省略，默认跨越一个网格。</p><p><strong>grid-area</strong>：指定项目放在哪一个区域。还可用作 <code>grid-row-start</code> 、<code>grid-column-start</code> 、<code>grid-row-end</code> 、<code>grid-column-end</code> 的合并简写形式，直接指定项目的位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  grid-area: &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>justify-self</strong>：设置单元格内容的水平位置（左中右），跟 <code>justify-items</code> 属性的用法完全一致，但只作用于单个项目。</p><p><strong>align-self</strong>：设置单元格内容的垂直位置（上中下），跟 <code>align-items</code> 属性的用法完全一致，也是只作用于单个项目。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start：对齐单元格的起始边缘。</span><br><span class="line">end：对齐单元格的结束边缘。</span><br><span class="line">center：单元格内部居中。</span><br><span class="line">stretch：拉伸，占满单元格的整个宽度（默认值）。</span><br></pre></td></tr></table></figure><p>如果省略第二个值，place-self属性会认为这两个值相等。</p><h3 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h3><p>BFC（Block formatting context）直译为”块级格式化上下文”。它是一个独立的渲染区域，只有 Block-level box 参与， 它规定了内部的 Block-level Box 如何布局，并且与这个区域外部毫不相干。</p><p>布局规则如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">内部的盒会在垂直方向一个接一个排列（可以看作 BFC 中有一个的常规流）</span><br><span class="line">处于同一个 BFC 中的元素相互影响，可能会发生 margin collapse</span><br><span class="line">每个元素的 margin box 的左边，与容器块 border box 的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此</span><br><span class="line">BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然</span><br><span class="line">计算 BFC 的高度时，考虑 BFC 所包含的所有元素，连浮动元素也参与计算</span><br><span class="line">浮动盒区域不叠加到 BFC 上</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://segmentfault.com/a/1190000018717319#articleHeader0" target="_blank" rel="noopener">浏览器解析 CSS 样式的过程</a></li><li><a href="https://juejin.im/post/5abc4fd7f265da237b2228ee" target="_blank" rel="noopener">真正理解”CSS选择器的优先级”</a></li><li><a href="https://segmentfault.com/a/1190000013612496" target="_blank" rel="noopener">【CSS基础】Flex弹性布局</a></li><li><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener">CSS Grid 网格布局教程</a></li><li><a href="http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html" target="_blank" rel="noopener">BFC 神奇背后的原理</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;CSS盒模型&quot;&gt;&lt;a href=&quot;#CSS盒模型&quot; class=&quot;headerlink&quot; title=&quot;CSS盒模型&quot;&gt;&lt;/a&gt;CSS盒模型&lt;/h3&gt;&lt;p&gt;盒模型分为 W3C 标准盒模型和 IE 盒模型。&lt;/p&gt;
&lt;h4 id=&quot;W3C标准盒模型&quot;&gt;&lt;a href=&quot;#W3C标准盒模型&quot; class=&quot;headerlink&quot; title=&quot;W3C标准盒模型&quot;&gt;&lt;/a&gt;W3C标准盒模型&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;属性 width，height 只包含内容 content，不包含 border 和 padding。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;IE盒模型&quot;&gt;&lt;a href=&quot;#IE盒模型&quot; class=&quot;headerlink&quot; title=&quot;IE盒模型&quot;&gt;&lt;/a&gt;IE盒模型&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;属性 width，height 包含 border 和 padding，指的是 content + padding + border。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;box-sizing属性&quot;&gt;&lt;a href=&quot;#box-sizing属性&quot; class=&quot;headerlink&quot; title=&quot;box-sizing属性&quot;&gt;&lt;/a&gt;box-sizing属性&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;是用来控制元素的盒子模型的解析模式，默认为 content-box&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;content-box：W3C 的标准盒子模型，设置元素的 height/width 属性指的是 content 部分的高/宽&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;border-box：IE 传统盒子模型，设置元素的 height/width 属性指的是 content + border + padding 部分的高/宽&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;编写页面代码时应尽量使用标准的W3C模型（需在页面中声明 DOCTYPE 类型），这样可以避免多个浏览器对同一页面的不兼容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;因为若不声明 DOCTYPE 类型，IE浏览器会将盒子模型解释为 IE 盒子模型，FireFox 等会将其解释为 W3C 盒子模型；若在页面中声明了 DOCTYPE 类型，所有的浏览器都会把盒模型解释为 W3C 盒模型。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="front-end" scheme="http://yoursite.com/categories/front-end/"/>
    
    
  </entry>
  
</feed>
