<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青蛙蛤蟆兽</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-25T09:21:09.544Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yupeilin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>puppeteer上传文件</title>
    <link href="http://yoursite.com/2019/07/25/practice/puppeteer%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/07/25/practice/puppeteer上传文件/</id>
    <published>2019-07-25T09:10:56.000Z</published>
    <updated>2019-07-25T09:21:09.544Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>使用 <code>puppeteer</code> 自动化上传文件。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>通过使用 api <code>elementHandle.uploadFile(...filePaths)</code> 可以来上传文件。</p><p>根据文档是可以使用相对路径，在使用相对路径时，会出现上传失败。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>原来上传文件的路径，是根据文件的根目录在执行 <code>path.resolve(相对路径)</code> 。</p><p>因为执行文件是在当前目录的子目录中，所以使用的是 <code>element.uploda(&#39;./test.png&#39;)</code> ，是根据当前目录来使用，所以就出错了。</p><p>最后，用相对路径上传文件时，上传文件路径得根据当前工作目录。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;使用 &lt;code&gt;puppeteer&lt;/code&gt; 自动化上传文件。&lt;/p&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot;
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Koa系列-Middleware：koa-validation</title>
    <link href="http://yoursite.com/2019/06/20/koa-validation/"/>
    <id>http://yoursite.com/2019/06/20/koa-validation/</id>
    <published>2019-06-20T02:05:26.000Z</published>
    <updated>2019-06-20T02:19:18.151Z</updated>
    
    <content type="html"><![CDATA[<p><code>koa-validation</code> 可以用来验证请求体的内容格式。具体的验证是通过 <code>Joi</code> 来实现。</p><p>现在来看一下源码吧。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">schema = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 判断在 schema 中是否有 opt</span></span><br><span class="line">  <span class="keyword">const</span> &#123; opt = &#123;&#125; &#125; = schema;</span><br><span class="line">  <span class="comment">// 通过 lodash.defaultsDeep 合并配置选项</span></span><br><span class="line">  <span class="keyword">const</span> options = _.defaultsDeep(opt, &#123;</span><br><span class="line">    allowUnknown: <span class="literal">true</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> defaultValidateKeys = [<span class="string">'body'</span>, <span class="string">'query'</span>, <span class="string">'params'</span>];</span><br><span class="line">    <span class="comment">// 找到需要验证的字段</span></span><br><span class="line">    <span class="keyword">const</span> needValidateKeys = _.intersection(defaultValidateKeys, <span class="built_in">Object</span>.keys(schema));</span><br><span class="line">    <span class="keyword">const</span> errors = [];</span><br><span class="line">    needValidateKeys.find(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 找出验证的对象</span></span><br><span class="line">      <span class="keyword">const</span> toValidateObj = item === <span class="string">'body'</span> ? ctx.request.body : ctx[item];</span><br><span class="line">      <span class="comment">// 验证内容</span></span><br><span class="line">      <span class="keyword">const</span> result = Joi.validate(toValidateObj, schema[item], options);</span><br><span class="line">      <span class="comment">// 验证失败</span></span><br><span class="line">      <span class="keyword">if</span> (result.error) &#123;</span><br><span class="line">        errors.push(result.error.details[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 验证成功继续验证</span></span><br><span class="line">      _.assignIn(toValidateObj, result.value);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errors.length !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ValidationError(errors);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><p>除此之外还有一个自定义验证错误 <code>ValidationError</code>。</p><p>确实不复杂，但是建议单独使用 <code>Joi</code> 会更灵活。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;koa-validation&lt;/code&gt; 可以用来验证请求体的内容格式。具体的验证是通过 &lt;code&gt;Joi&lt;/code&gt; 来实现。&lt;/p&gt;
&lt;p&gt;现在来看一下源码吧。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;schema = &amp;#123;&amp;#125;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 判断在 schema 中是否有 opt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123; opt = &amp;#123;&amp;#125; &amp;#125; = schema;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 通过 lodash.defaultsDeep 合并配置选项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; options = _.defaultsDeep(opt, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    allowUnknown: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; (ctx, next) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; defaultValidateKeys = [&lt;span class=&quot;string&quot;&gt;&#39;body&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;query&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;params&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 找到需要验证的字段&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; needValidateKeys = _.intersection(defaultValidateKeys, &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(schema));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; errors = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    needValidateKeys.find(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 找出验证的对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; toValidateObj = item === &lt;span class=&quot;string&quot;&gt;&#39;body&#39;&lt;/span&gt; ? ctx.request.body : ctx[item];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 验证内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; result = Joi.validate(toValidateObj, schema[item], options);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 验证失败&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (result.error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        errors.push(result.error.details[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 验证成功继续验证&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      _.assignIn(toValidateObj, result.value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (errors.length !== &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ValidationError(errors);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; next();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Koa" scheme="http://yoursite.com/categories/Koa/"/>
    
    
      <category term="koa" scheme="http://yoursite.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>Koa系列-Middleware：koa-connect</title>
    <link href="http://yoursite.com/2019/06/12/koa/koa-connect/"/>
    <id>http://yoursite.com/2019/06/12/koa/koa-connect/</id>
    <published>2019-06-12T02:29:37.000Z</published>
    <updated>2019-06-12T02:39:48.184Z</updated>
    
    <content type="html"><![CDATA[<p>很简单的一个中间件，用来转化 <code>connect</code> 和 <code>Express</code> 的中间件在 koa 上的使用。</p><p>直接分析代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理 connect，直接返回 next()</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noCallbackHandler</span>(<span class="params">ctx, connectMiddleware, next</span>) </span>&#123;</span><br><span class="line">  connectMiddleware(ctx.req, ctx.res)</span><br><span class="line">  <span class="keyword">return</span> next()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理 Express，使用 Promise来处理 next</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">withCallbackHandler</span>(<span class="params">ctx, connectMiddleware, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    connectMiddleware(ctx.req, ctx.res, err =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) reject(err)</span><br><span class="line">      <span class="keyword">else</span> resolve(next())</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出的中间件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">koaConnect</span>(<span class="params">connectMiddleware</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 根据传入的函数的参数判断是哪个框架</span></span><br><span class="line">  <span class="keyword">const</span> handler = connectMiddleware.length &lt; <span class="number">3</span></span><br><span class="line">    ? noCallbackHandler</span><br><span class="line">    : withCallbackHandler</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">koaConnect</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> handler(ctx, connectMiddleware, next)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = koaConnect</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;很简单的一个中间件，用来转化 &lt;code&gt;connect&lt;/code&gt; 和 &lt;code&gt;Express&lt;/code&gt; 的中间件在 koa 上的使用。&lt;/p&gt;
&lt;p&gt;直接分析代码。&lt;/p&gt;
&lt;figure class=&quot;highlight
        
      
    
    </summary>
    
      <category term="Koa" scheme="http://yoursite.com/categories/Koa/"/>
    
    
      <category term="koa" scheme="http://yoursite.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>Koa系列-Routing and Mounting：koa-router</title>
    <link href="http://yoursite.com/2019/05/29/koa/koa-router/"/>
    <id>http://yoursite.com/2019/05/29/koa/koa-router/</id>
    <published>2019-05-29T06:00:24.000Z</published>
    <updated>2019-05-29T07:54:14.320Z</updated>
    
    <content type="html"><![CDATA[<pre><code>在 Node 应用中，路由是一个很重要的概念。路由用于确定应用程序如何响应对特定端点的客户机请求，包含一个 URI（或路径）和一个特定的 HTTP 请求方法（GET、POST 等）。每个路由可以具有一个或多个处理程序函数，这些函数在路由匹配时执行。</code></pre><p>在 koa 中， <code>koa-router</code> 是一个功能丰富支持 <code>restful</code> 的路由中间件。</p><p><code>koa-router</code> 有两个构造函数分别是 <code>Router</code> 和 <code>Layer</code> 。</p><p>函数 <code>Router</code> 是用来创建路由。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Router</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果是直接调用函数，则也会实例 Router</span></span><br><span class="line">  <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Router)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Router(opts);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 支持前缀</span></span><br><span class="line">  <span class="keyword">this</span>.opts = opts || &#123;&#125;;</span><br><span class="line">  <span class="comment">// 请求方法</span></span><br><span class="line">  <span class="keyword">this</span>.methods = <span class="keyword">this</span>.opts.methods || [</span><br><span class="line">    <span class="string">'HEAD'</span>,</span><br><span class="line">    <span class="string">'OPTIONS'</span>,</span><br><span class="line">    <span class="string">'GET'</span>,</span><br><span class="line">    <span class="string">'PUT'</span>,</span><br><span class="line">    <span class="string">'PATCH'</span>,</span><br><span class="line">    <span class="string">'POST'</span>,</span><br><span class="line">    <span class="string">'DELETE'</span></span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.params = &#123;&#125;;</span><br><span class="line">  <span class="comment">// 路由层集合</span></span><br><span class="line">  <span class="keyword">this</span>.stack = [];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><p>然后是将每个 http 方法挂载到构造函数 Router 的原型上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">methods.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">method</span>) </span>&#123;</span><br><span class="line">  Router.prototype[method] = <span class="function"><span class="keyword">function</span> (<span class="params">name, path, middleware</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> middleware;</span><br><span class="line">    <span class="comment">// 判断参数用来确定 name , path , middleware</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> path === <span class="string">'string'</span> || path <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) &#123;</span><br><span class="line">      middleware = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      middleware = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">      path = name;</span><br><span class="line">      name = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 来注册一个新的路由层</span></span><br><span class="line">    <span class="keyword">this</span>.register(path, [method], middleware, &#123;</span><br><span class="line">      name: name</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样可以通过 <code>route.get(&#39;/&#39;,...)</code> 来实现对该路径的注册。</p><p>在 <code>koa-router</code> 中使用路由中间件也是很简单的，跟 <code>koa</code> 的使用方式一致，即通过 <code>use</code> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Router.prototype.use = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> router = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> middleware = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">var</span> path;</span><br><span class="line">  <span class="comment">// 支持对不同路径的中间件形式</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(middleware[<span class="number">0</span>]) &amp;&amp; <span class="keyword">typeof</span> middleware[<span class="number">0</span>][<span class="number">0</span>] === <span class="string">'string'</span>) &#123;</span><br><span class="line">    middleware[<span class="number">0</span>].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">p</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 通过 apply 改变 this 指向，将多路径中间件转化成单路径中间件形式</span></span><br><span class="line">      router.use.apply(router, [p].concat(middleware.slice(<span class="number">1</span>)));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 具体执行</span></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>koa-router</code> 也提供两个中间件分别为 <code>routes</code> 和 <code>allowedMethods</code> 。</p><p>函数 <code>routes</code> 用来匹配 <code>request url</code> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Router.prototype.routes = Router.prototype.middleware = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> router = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> dispatch = <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    debug(<span class="string">'%s %s'</span>, ctx.method, ctx.path);</span><br><span class="line">    <span class="keyword">var</span> path = router.opts.routerPath || ctx.routerPath || ctx.path;</span><br><span class="line">    <span class="comment">// 匹配路径和请求方法相同的 router</span></span><br><span class="line">    <span class="keyword">var</span> matched = router.match(path, ctx.method);</span><br><span class="line">    <span class="keyword">var</span> layerChain, layer, i;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!matched.route) <span class="keyword">return</span> next();</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到已匹配到的路由层</span></span><br><span class="line">    layerChain = matchedLayers.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">memo, layer</span>) </span>&#123;</span><br><span class="line">      memo.push(<span class="function"><span class="keyword">function</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 对 layer 做处理</span></span><br><span class="line">        ctx.captures = layer.captures(path, ctx.captures);</span><br><span class="line">        ctx.params = layer.params(path, ctx.captures, ctx.params);</span><br><span class="line">        ctx.routerName = layer.name;</span><br><span class="line">        <span class="keyword">return</span> next();</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// 把 layer 的中间件也推入其中</span></span><br><span class="line">      <span class="keyword">return</span> memo.concat(layer.stack);</span><br><span class="line">    &#125;, []);</span><br><span class="line">    <span class="comment">// 最后通过 koa-compse 执行一系列函数</span></span><br><span class="line">    <span class="keyword">return</span> compose(layerChain)(ctx, next);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  dispatch.router = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dispatch;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>函数 <code>allowedMethods</code> 是用来确认请求方法，以及当不满足时自定义错误处理</p><p>函数 <code>register</code> 是用来注册路由。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Router.prototype.register = <span class="function"><span class="keyword">function</span> (<span class="params">path, methods, middleware, opts</span>) </span>&#123;</span><br><span class="line">  opts = opts || &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> router = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> stack = <span class="keyword">this</span>.stack;</span><br><span class="line">  <span class="comment">// 支持数组路径</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(path)) &#123;</span><br><span class="line">    path.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">p</span>) </span>&#123;</span><br><span class="line">      router.register.call(router, p, methods, middleware, opts);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 创建路由</span></span><br><span class="line">  <span class="keyword">var</span> route = <span class="keyword">new</span> Layer(path, methods, middleware, &#123;</span><br><span class="line">    end: opts.end === <span class="literal">false</span> ? opts.end : <span class="literal">true</span>,</span><br><span class="line">    name: opts.name,</span><br><span class="line">    sensitive: opts.sensitive || <span class="keyword">this</span>.opts.sensitive || <span class="literal">false</span>,</span><br><span class="line">    strict: opts.strict || <span class="keyword">this</span>.opts.strict || <span class="literal">false</span>,</span><br><span class="line">    prefix: opts.prefix || <span class="keyword">this</span>.opts.prefix || <span class="string">""</span>,</span><br><span class="line">    ignoreCaptures: opts.ignoreCaptures</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  stack.push(route);</span><br><span class="line">  <span class="keyword">return</span> route;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>函数 <code>Layer</code> 用来初始化路由层。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Layer</span>(<span class="params">path, methods, middleware, opts</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// opts 是被用来 path-to-regexp 的选项</span></span><br><span class="line">  <span class="keyword">this</span>.opts = opts || &#123;&#125;;</span><br><span class="line">  <span class="comment">// 路由名称</span></span><br><span class="line">  <span class="keyword">this</span>.name = <span class="keyword">this</span>.opts.name || <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 该路由支持的 http verbs</span></span><br><span class="line">  <span class="keyword">this</span>.methods = [];</span><br><span class="line">  <span class="comment">// 路由匹配参数</span></span><br><span class="line">  <span class="keyword">this</span>.paramNames = [];</span><br><span class="line">  <span class="comment">// 中间件</span></span><br><span class="line">  <span class="keyword">this</span>.stack = <span class="built_in">Array</span>.isArray(middleware) ? middleware : [middleware];</span><br><span class="line">  <span class="comment">// 该路由 http 方法支持 GET ，则天剑 HEAD</span></span><br><span class="line">  methods.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">method</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> l = <span class="keyword">this</span>.methods.push(method.toUpperCase());</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.methods[l<span class="number">-1</span>] === <span class="string">'GET'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.methods.unshift(<span class="string">'HEAD'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 确保中间件都是函数</span></span><br><span class="line">  <span class="keyword">this</span>.stack.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> type = (<span class="keyword">typeof</span> fn);</span><br><span class="line">    <span class="keyword">if</span> (type !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        methods.toString() + <span class="string">" `"</span> + (<span class="keyword">this</span>.opts.name || path) +<span class="string">"`: `middleware` "</span></span><br><span class="line">        + <span class="string">"must be a function, not `"</span> + type + <span class="string">"`"</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="keyword">this</span>);</span><br><span class="line">  <span class="comment">// 需要匹配的请求路径</span></span><br><span class="line">  <span class="keyword">this</span>.path = path;</span><br><span class="line">  <span class="comment">// 通过 pathToRegExp 将路径转化成正则</span></span><br><span class="line">  <span class="keyword">this</span>.regexp = pathToRegExp(path, <span class="keyword">this</span>.paramNames, <span class="keyword">this</span>.opts);</span><br><span class="line"></span><br><span class="line">  debug(<span class="string">'defined route %s %s'</span>, <span class="keyword">this</span>.methods, <span class="keyword">this</span>.opts.prefix + <span class="keyword">this</span>.path);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>除此之外， 构造函数 <code>Layer</code> 提供 <code>setPrefix</code> , <code>param</code> , <code>url</code> , <code>captures</code> , <code>params</code> , <code>match</code> 等方法，用来处理实际的请求路径及对应方法。</p><p>总结一下， <code>koa-router</code> 提供了较为丰富的实际使用方式，可以对应很多不同的场景，是值得在 koa 应用中使用的。</p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;在 Node 应用中，路由是一个很重要的概念。

路由用于确定应用程序如何响应对特定端点的客户机请求，包含一个 URI（或路径）和一个特定的 HTTP 请求方法（GET、POST 等）。

每个路由可以具有一个或多个处理程序函数，这些函数在路由匹配时执行。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 koa 中， &lt;code&gt;koa-router&lt;/code&gt; 是一个功能丰富支持 &lt;code&gt;restful&lt;/code&gt; 的路由中间件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;koa-router&lt;/code&gt; 有两个构造函数分别是 &lt;code&gt;Router&lt;/code&gt; 和 &lt;code&gt;Layer&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;函数 &lt;code&gt;Router&lt;/code&gt; 是用来创建路由。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Router&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;opts&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 如果是直接调用函数，则也会实例 Router&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Router)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Router(opts);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 支持前缀&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.opts = opts || &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 请求方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.methods = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.opts.methods || [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;HEAD&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;OPTIONS&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;GET&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;PUT&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;PATCH&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;POST&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;DELETE&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.params = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 路由层集合&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.stack = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Koa" scheme="http://yoursite.com/categories/Koa/"/>
    
    
      <category term="koa" scheme="http://yoursite.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>修改页面，页面自动刷新</title>
    <link href="http://yoursite.com/2019/05/24/practice/%E4%BF%AE%E6%94%B9%E9%A1%B5%E9%9D%A2%EF%BC%8C%E9%A1%B5%E9%9D%A2%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0/"/>
    <id>http://yoursite.com/2019/05/24/practice/修改页面，页面自动刷新/</id>
    <published>2019-05-24T05:55:15.000Z</published>
    <updated>2019-05-29T07:06:54.556Z</updated>
    
    <content type="html"><![CDATA[<p><strong>如何在修改页面后，让页面自动刷新?</strong></p><p><strong>答案是使用 <code>socket.io</code> 。</strong></p><p><code>socket.io</code> 是一个 <code>WebSocket</code> 库，包括了客户端的 js 和服务器端的 nodejs ，它的目标是构建可以在不同浏览器和移动设备上使用的实时应用。它会自动根据浏览器从 WebSocket 、 AJAX 长轮询、 Iframe 流等等各种方式中选择最佳的方式来实现网络实时应用，非常方便和人性化，而且支持的浏览器最低达 IE5.5。</p><p>具体如何使用 <code>socket.io</code> 可以看<a href="https://socket.io/docs/" target="_blank" rel="noopener">官方文档</a>。</p><h5 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h5><p>首先开启 node 服务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> server = http.createServer(app.callback());</span><br><span class="line"><span class="keyword">const</span> io = socketIo.listen(server);</span><br><span class="line">server.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><p>然后需要监听文件的修改，需要用到 <code>chokidar</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">chokidar.watch(process.cwd(), &#123;</span><br><span class="line">  <span class="comment">// 忽略 node_modules</span></span><br><span class="line">  ignored: <span class="regexp">/node_modules/</span></span><br><span class="line">&#125;).on(<span class="string">'change'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 当文件发生变化，socket 触发 reload</span></span><br><span class="line">  io.emit(<span class="string">'reload'</span>);</span><br><span class="line">&#125;).on(<span class="string">'unlink'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 当删除文件，socket 触发 reload</span></span><br><span class="line">  io.emit(<span class="string">'reload'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后在打开文件时，需要去注入 <code>socket</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">reloading() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> (ctx,next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">    <span class="keyword">if</span>(ctx.contentType === <span class="string">'text/html) &#123;</span></span><br><span class="line"><span class="string">       const injectHtml = await new Promise(resolve =&gt; &#123;</span></span><br><span class="line"><span class="string">        ctx.body.on('</span>data<span class="string">', chunk =&gt; &#123;</span></span><br><span class="line"><span class="string">          chunks += chunk;</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">        ctx.body.on('</span>end<span class="string">', () =&gt; &#123;</span></span><br><span class="line"><span class="string">          // 注入 socketIoSctipt</span></span><br><span class="line"><span class="string">          const val = chunks.replace('</span>&lt;<span class="regexp">/head&gt;', body =&gt; &#123;</span></span><br><span class="line"><span class="regexp">            return socketIoSctipt + body;</span></span><br><span class="line"><span class="regexp">          &#125;</span></span><br><span class="line"><span class="regexp">          resolve(val);</span></span><br><span class="line"><span class="regexp">        &#125;);</span></span><br><span class="line"><span class="regexp">      &#125;);</span></span><br><span class="line"><span class="regexp">      ctx.set('Content-Type', 'text/</span>html; charset=utf<span class="number">-8</span><span class="string">');</span></span><br><span class="line"><span class="string">      ctx.body = injectHtml;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p><code>socketIoSctipt</code> 的值是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"/socket.io/socket.io.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// 默认是使用 websocket，如果浏览器不支持 webscoket，就使用 ajax 轮询</span></span><br><span class="line"><span class="keyword">var</span> _$_socket=io(&#123;<span class="attr">transports</span>:[<span class="string">"websocket"</span>,<span class="string">"polling"</span>]&#125;);</span><br><span class="line"><span class="comment">// 当服务端触发 reload 事件，客户端监听到后执行回调</span></span><br><span class="line">_$_socket.on(<span class="string">"reload"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">window</span>.location.reload()&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>最后当你在编辑器上修改文件的代码后，页面会自动刷新。</p><p>参考 npm 包： <a href="https://github.com/yupeilin123/staticky" target="_blank" rel="noopener">staticky</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;如何在修改页面后，让页面自动刷新?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;答案是使用 &lt;code&gt;socket.io&lt;/code&gt; 。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;socket.io&lt;/code&gt; 是一个 &lt;code&gt;WebSocket&lt;/code&gt; 库，包括了客户端的 js 和服务器端的 nodejs ，它的目标是构建可以在不同浏览器和移动设备上使用的实时应用。它会自动根据浏览器从 WebSocket 、 AJAX 长轮询、 Iframe 流等等各种方式中选择最佳的方式来实现网络实时应用，非常方便和人性化，而且支持的浏览器最低达 IE5.5。&lt;/p&gt;
&lt;p&gt;具体如何使用 &lt;code&gt;socket.io&lt;/code&gt; 可以看&lt;a href=&quot;https://socket.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;h5 id=&quot;如何实现&quot;&gt;&lt;a href=&quot;#如何实现&quot; class=&quot;headerlink&quot; title=&quot;如何实现&quot;&gt;&lt;/a&gt;如何实现&lt;/h5&gt;&lt;p&gt;首先开启 node 服务&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Koa = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;koa&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;http&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; app = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Koa();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; server = http.createServer(app.callback());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; io = socketIo.listen(server);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server.listen(&lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
