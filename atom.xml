<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青蛙蛤蟆兽</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-21T08:09:06.748Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yupeilin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>online-static中文指南</title>
    <link href="http://yoursite.com/2018/10/21/online-static/"/>
    <id>http://yoursite.com/2018/10/21/online-static/</id>
    <published>2018-10-21T07:51:57.000Z</published>
    <updated>2018-10-21T08:09:06.748Z</updated>
    
    <content type="html"><![CDATA[<p>online-static 是一个更好的、更简单的静态文件服务器。你能使用它然后可以在电脑或手机上查看静态文件。并且当文件发生变化时能自动刷新浏览器。</p><h2 id="怎么使用"><a href="#怎么使用" class="headerlink" title="怎么使用"></a>怎么使用</h2><p>首先你可以先执行 <code>npm install online-static -g</code> 命令，</p><p>然后打开你的项目目录，使用命令 <code>online</code>， </p><p>它能自然帮你打开浏览器显示<code>index.html</code>，</p><p>如果 <code>index.html</code> 文件不存在，则它将你的项目目录下的所有文件展示出来。</p><a id="more"></a><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>在项目的目录中使用 <code>online</code> 命令。或者，您可以添加作为命令行参数的路径。</p><p>命令行参数：</p><ul><li><code>-p</code> or <code>--port</code> 端口使用，默认8091</li><li><code>-n</code> or <code>--no-browser</code> 是否自动打开浏览器</li><li><code>-t</code> or <code>--target</code> 选择打开哪个文件，默认 <code>index.html</code></li><li><code>-d</code> or <code>--dir</code> 选择工作目录，默认 <code>process.cwd</code></li><li><code>-g</code> or <code>--gzip</code> 是否开启gize压缩</li><li><code>-r</code> or <code>--reload</code> 观察文件或目录的变化，自动刷新。默认选择 <code>target file</code>，只有两个选项 <code>target</code> 或者 <code>dir</code></li><li><code>-h</code> or <code>--help</code> 打印用法</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">online -p 8000 // start static file server in port 8000</span><br><span class="line">online -n // don&apos;t open browser automatically</span><br><span class="line">online -t index.js // the index.js file will be opened</span><br><span class="line">online -d src //  the src directory under the current directory will be working directory</span><br><span class="line">online -g // open gizp encoding</span><br><span class="line">online -r dir // all files in the current directory will be monitored.</span><br></pre></td></tr></table></figure><h2 id="参与贡献"><a href="#参与贡献" class="headerlink" title="参与贡献"></a>参与贡献</h2><p>非常欢迎你的贡献，你可以通过以下方式和我们一起共建：</p><ul><li>通过 Issue bug 或进行咨询。</li><li>提交 Pull Request 改进代码。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;online-static 是一个更好的、更简单的静态文件服务器。你能使用它然后可以在电脑或手机上查看静态文件。并且当文件发生变化时能自动刷新浏览器。&lt;/p&gt;
&lt;h2 id=&quot;怎么使用&quot;&gt;&lt;a href=&quot;#怎么使用&quot; class=&quot;headerlink&quot; title=&quot;怎么使用&quot;&gt;&lt;/a&gt;怎么使用&lt;/h2&gt;&lt;p&gt;首先你可以先执行 &lt;code&gt;npm install online-static -g&lt;/code&gt; 命令，&lt;/p&gt;
&lt;p&gt;然后打开你的项目目录，使用命令 &lt;code&gt;online&lt;/code&gt;， &lt;/p&gt;
&lt;p&gt;它能自然帮你打开浏览器显示&lt;code&gt;index.html&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;index.html&lt;/code&gt; 文件不存在，则它将你的项目目录下的所有文件展示出来。&lt;/p&gt;
    
    </summary>
    
      <category term="npm" scheme="http://yoursite.com/categories/npm/"/>
    
    
      <category term="NPM" scheme="http://yoursite.com/tags/NPM/"/>
    
  </entry>
  
  <entry>
    <title>每周npm模块源码解读：anywhere</title>
    <link href="http://yoursite.com/2018/10/17/npm/anywhere/"/>
    <id>http://yoursite.com/2018/10/17/npm/anywhere/</id>
    <published>2018-10-17T14:20:38.000Z</published>
    <updated>2018-10-17T15:41:12.428Z</updated>
    
    <content type="html"><![CDATA[<p><strong>周2018.10.15 ~ 2018.10.21</strong></p><h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>模块名：<code>anywhere</code></p><p>github: <a href="https://github.com/JacksonTian/anywhere" target="_blank" rel="noopener">https://github.com/JacksonTian/anywhere</a></p><p>描述：随时随地将你的当前目录变成一个静态文件服务器的根目录</p><p>适合人群：至少看过一遍源码</p><a id="more"></a><h5 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h5><p>首先使用了模块 <code>minimist</code> 来解析参数。有两个参数是默认的，一个是端口号，另一个是静态文件的当前目录。</p><p>接着使用了模块 <code>connect</code> ，使用了两个中间件：</p><p><code>serve-static</code> : 默认把 <code>process.cwd</code> 作为静态目录，以及请求该目录下 <code>index.html</code> 。</p><p><code>serve-index</code> : 如果该目录下没有 <code>index.html</code> 文件，则将该目录下的文件列表作为请求返回值。</p><p>确定http端口号，以及https的端口号。得到当前ip的地址，或者是‘127.0.0.1’作为主机名。</p><p>创建http服务器，确定https服务器。</p><p>最后自动打开浏览器。</p><h5 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h5><p>实用方便的一个静态服务器。<br>在做完静态页面的时候，想在手机上测试，就使用到了它，通过局域网，在手机上就能访问到了本地的文件。<br>但这个包可以做的更好。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;周2018.10.15 ~ 2018.10.21&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h5&gt;&lt;p&gt;模块名：&lt;code&gt;anywhere&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;github: &lt;a href=&quot;https://github.com/JacksonTian/anywhere&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/JacksonTian/anywhere&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;描述：随时随地将你的当前目录变成一个静态文件服务器的根目录&lt;/p&gt;
&lt;p&gt;适合人群：至少看过一遍源码&lt;/p&gt;
    
    </summary>
    
      <category term="npm" scheme="http://yoursite.com/categories/npm/"/>
    
    
      <category term="NPM" scheme="http://yoursite.com/tags/NPM/"/>
    
  </entry>
  
  <entry>
    <title>学萧</title>
    <link href="http://yoursite.com/2018/10/14/life/%E5%AD%A6%E7%AE%AB/"/>
    <id>http://yoursite.com/2018/10/14/life/学箫/</id>
    <published>2018-10-14T15:23:41.000Z</published>
    <updated>2018-10-16T05:51:05.235Z</updated>
    
    <content type="html"><![CDATA[<p>横吹是笛，竖吹是萧。</p><p>想学横吹，却买了萧。</p><p>萧难笛易，因于发声。</p><p>现已如此，好好学萧。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;横吹是笛，竖吹是萧。&lt;/p&gt;
&lt;p&gt;想学横吹，却买了萧。&lt;/p&gt;
&lt;p&gt;萧难笛易，因于发声。&lt;/p&gt;
&lt;p&gt;现已如此，好好学萧。&lt;/p&gt;

        
      
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="萧" scheme="http://yoursite.com/tags/%E8%90%A7/"/>
    
  </entry>
  
  <entry>
    <title>每周npm模块源码解读：meow</title>
    <link href="http://yoursite.com/2018/10/09/npm/meow/"/>
    <id>http://yoursite.com/2018/10/09/npm/meow/</id>
    <published>2018-10-09T08:52:29.000Z</published>
    <updated>2018-10-16T05:51:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>周2018.10.8 ~ 2018.10.14</strong></p><h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>模块名：<code>meow</code></p><p>github: <a href="https://github.com/sindresorhus/meow" target="_blank" rel="noopener">https://github.com/sindresorhus/meow</a></p><p>描述：以较简单的方式供使用者开发node命令行</p><p>适合人群：至少看过一遍源码</p><a id="more"></a><h5 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h5><p>最开始是正确处理promise的错误，防止没有 <code>.catch()</code> 时的静默处理（可以使用process的事件 <code>unhandledRejection</code> 代替）。</p><p>判断是否存在 <code>helpMessage</code> ，若无，则使 <code>helpMessage</code> 为空。使用 <code>Object.assign</code> 复制一个新的 <code>options</code> 对象。</p><p>当选项中的 <code>booleanDefault</code> 来使 <code>options.flag</code> 里的属性type的类型为 <code>boolean</code> 并且不存在属性default，给default赋值 <code>options.booleanDefault</code> 。</p><p>把转化好的 <code>minimistFlags</code> 又浅拷贝到变量 <code>minimistoptions</code> ，接着驼峰转化。可能使用的是 <code>yargs</code> , 要转化命令行带的参数。</p><p>接着标准化package.json的数据，设置进程名称。如果设置了选择的 <code>description</code> 则加入到 <code>helpMessage</code> 中。</p><p>定义了两个方法 <code>showHelp</code> 和 <code>showVersion</code> ，用来打印 <code>helpMessage</code> 和 <code>version</code> 并退出该进程。</p><h5 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h5><p>较少的代码量就提供了开发node命令行的功能，适用于小型的命令行开发。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;周2018.10.8 ~ 2018.10.14&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h5&gt;&lt;p&gt;模块名：&lt;code&gt;meow&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;github: &lt;a href=&quot;https://github.com/sindresorhus/meow&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/sindresorhus/meow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;描述：以较简单的方式供使用者开发node命令行&lt;/p&gt;
&lt;p&gt;适合人群：至少看过一遍源码&lt;/p&gt;
    
    </summary>
    
      <category term="npm" scheme="http://yoursite.com/categories/npm/"/>
    
    
      <category term="NPM" scheme="http://yoursite.com/tags/NPM/"/>
    
  </entry>
  
  <entry>
    <title>每周npm模块源码解读：progress</title>
    <link href="http://yoursite.com/2018/10/07/npm/progress/"/>
    <id>http://yoursite.com/2018/10/07/npm/progress/</id>
    <published>2018-10-07T07:56:48.000Z</published>
    <updated>2018-10-16T05:51:36.019Z</updated>
    
    <content type="html"><![CDATA[<p><strong>周2018.10.1 ~ 2018.10.7</strong></p><h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>模块名：<code>每周npm模块源码解读：progress</code></p><p>github: <a href="https://github.com/visionmedia/node-progress" target="_blank" rel="noopener">https://github.com/visionmedia/node-progress</a></p><p>描述：提供在终端中灵活的进度条</p><p>适合人群：至少看过一遍源码</p><a id="more"></a><h5 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h5><p>首先定义了 <code>ProgressBar</code> 类，默认将 <code>process.stderr</code> 作为终端的输出，紧接着定义类属性。</p><p>该类有5个类方法，分明为 <code>tick</code> , <code>render</code> , <code>update</code> , <code>interrupt</code> 和 <code>terminate</code> 。着重讲述 <code>tick</code> 和 <code>render</code> 这两个方法。</p><p>方法 <code>tick</code> ：<br>设置属性 <code>renderThrottle</code> 值为0时，即立刻执行方法 <code>render</code> 。否则定义一个定时器，来执行方法 <code>render</code> 。如果当进度条完成时，执行 <code>terminate</code>。</p><p>方法 <code>render</code> ：<br>每一次定时器的执行的会生成表示进度条的字符，然后显示到终端上。是通过计算当前时刻已完成的和未完成的，然后通过字符串方法 <code>replace</code> 来替换。如果有自定义的token，也可以进行替换。</p><p>方法 <code>update</code> ：<br>作用是在进度条的过程中更新完成率和tokens，然后执行方法 <code>tick</code> 。每次 <code>update</code> 都会去重新去 <code>tick</code> 。</p><p>方法 <code>interrupt</code> ：<br>在此刻，输出message。实则是打断此刻的进度条输入信息。</p><p>方法 <code>terminate</code> ：</p><p>终止进度条。</p><h5 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h5><p>较好理解，每个属性和方法都有较为清晰的理解。可以从中学到流与终端的搭配使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;周2018.10.1 ~ 2018.10.7&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h5&gt;&lt;p&gt;模块名：&lt;code&gt;每周npm模块源码解读：progress&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;github: &lt;a href=&quot;https://github.com/visionmedia/node-progress&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/visionmedia/node-progress&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;描述：提供在终端中灵活的进度条&lt;/p&gt;
&lt;p&gt;适合人群：至少看过一遍源码&lt;/p&gt;
    
    </summary>
    
      <category term="npm" scheme="http://yoursite.com/categories/npm/"/>
    
    
      <category term="NPM" scheme="http://yoursite.com/tags/NPM/"/>
    
  </entry>
  
</feed>
