<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青蛙蛤蟆兽</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-15T07:56:13.977Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yupeilin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Koa系列-Utilities：koa-convert</title>
    <link href="http://yoursite.com/2019/04/15/koa/koa-convert/"/>
    <id>http://yoursite.com/2019/04/15/koa/koa-convert/</id>
    <published>2019-04-15T07:20:01.000Z</published>
    <updated>2019-04-15T07:56:13.977Z</updated>
    
    <content type="html"><![CDATA[<p>该中间件是用来转化 <code>koa legacy</code> 中间件。</p><p><code>convert</code> 是用来将中间件(0.x &amp; 1.x)转化为(2.x)</p><p><code>convert.back</code> 是用来将中间件(2.x)转化为(0.x &amp; 1.x)</p><p><code>convert.compose</code> 是通过 <code>koa-compose</code> 来执行这些转化过的中间件。</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span> (<span class="params">mw</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断类型</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> mw !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'middleware must be a function'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 是不是generator函数</span></span><br><span class="line">  <span class="keyword">if</span> (mw.constructor.name !== <span class="string">'GeneratorFunction'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> mw</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 使用co转化</span></span><br><span class="line">  <span class="keyword">const</span> converted = <span class="function"><span class="keyword">function</span> (<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> co.call(ctx, mw.call(ctx, createGenerator(next)))</span><br><span class="line">  &#125;</span><br><span class="line">  converted._name = mw._name || mw.name</span><br><span class="line">  <span class="keyword">return</span> converted</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将 promise next 转化为 generator</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">createGenerator</span> (<span class="params">next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">yield</span> next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">convert.back = <span class="function"><span class="keyword">function</span> (<span class="params">mw</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断类型</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> mw !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'middleware must be a function'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 是不是generator函数</span></span><br><span class="line">  <span class="keyword">if</span> (mw.constructor.name === <span class="string">'GeneratorFunction'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> mw</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//通过co转化promise middleware</span></span><br><span class="line">  <span class="keyword">const</span> converted = <span class="function"><span class="keyword">function</span> * (<span class="params">next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ctx = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">let</span> called = <span class="literal">false</span></span><br><span class="line">    <span class="comment">// 防止next被调用多次，即每次只允许一个next调用，否则就会有一些next被重复执行</span></span><br><span class="line">      <span class="keyword">if</span> (called) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'next() called multiple times'</span>))</span><br><span class="line">      &#125;</span><br><span class="line">      called = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">return</span> co.call(ctx, next)</span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">  converted._name = mw._name || mw.name</span><br><span class="line">  <span class="keyword">return</span> converted</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">convert.compose = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(arr)) &#123;</span><br><span class="line">    arr = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 通过koa-compose执行转化过的中间件</span></span><br><span class="line">  <span class="keyword">return</span> compose(arr.map(convert))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;该中间件是用来转化 &lt;code&gt;koa legacy&lt;/code&gt; 中间件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;convert&lt;/code&gt; 是用来将中间件(0.x &amp;amp; 1.x)转化为(2.x)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;convert.back&lt;/code&gt; 是用来将中间件(2.x)转化为(0.x &amp;amp; 1.x)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;convert.compose&lt;/code&gt; 是通过 &lt;code&gt;koa-compose&lt;/code&gt; 来执行这些转化过的中间件。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Koa系列-Utilities：koa-compose</title>
    <link href="http://yoursite.com/2019/04/15/koa/koa-compose/"/>
    <id>http://yoursite.com/2019/04/15/koa/koa-compose/</id>
    <published>2019-04-15T03:51:07.000Z</published>
    <updated>2019-04-15T07:55:04.122Z</updated>
    
    <content type="html"><![CDATA[<p>中间件 <code>koa-compose</code> 是用来组合所有的中间件来依次执行。</p><p>首先先判断 <code>middleware</code> 的类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(middleware)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Middleware stack must be an array!'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> fn <span class="keyword">of</span> middleware) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">'function'</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Middleware must be composed of functions!'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>然后开始依次调用中间件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">context, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// last called middleware #</span></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">-1</span></span><br><span class="line">  <span class="comment">// 执行第一个中间件</span></span><br><span class="line">  <span class="keyword">return</span> dispatch(<span class="number">0</span>)</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 防止next被调用多次，即每次只允许一个next调用，否则就会有一些next被重复执行</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt;= index) <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'next() called multiple times'</span>))</span><br><span class="line">    index = i</span><br><span class="line">    <span class="keyword">let</span> fn = middleware[i]</span><br><span class="line">    <span class="comment">// 若没有中间件，则返回next。或者中间件的顺序为中间件的长度时，返回next</span></span><br><span class="line">    <span class="keyword">if</span> (i === middleware.length) fn = next</span><br><span class="line">    <span class="comment">// 不存在fn，返回promise.resolve，接上 `.then(handleResponse).catch(onerror);`</span></span><br><span class="line">    <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve()</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 下一个中间件的next=dispatch.bind(null, i + 1))，所以中间件会去执行await next()，实则去执行下一个中间件</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(fn(context, dispatch.bind(<span class="literal">null</span>, i + <span class="number">1</span>)));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;中间件 &lt;code&gt;koa-compose&lt;/code&gt; 是用来组合所有的中间件来依次执行。&lt;/p&gt;
&lt;p&gt;首先先判断 &lt;code&gt;middleware&lt;/code&gt; 的类型&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.isArray(middleware)) &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;TypeError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Middleware stack must be an array!&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; fn &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; middleware) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; fn !== &lt;span class=&quot;string&quot;&gt;&#39;function&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;TypeError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Middleware must be composed of functions!&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Koa系列-Response Transformation：koa-res</title>
    <link href="http://yoursite.com/2019/04/01/koa/koa-res/"/>
    <id>http://yoursite.com/2019/04/01/koa/koa-res/</id>
    <published>2019-04-01T06:54:02.000Z</published>
    <updated>2019-04-01T07:02:06.138Z</updated>
    
    <content type="html"><![CDATA[<p>代码比较简单，干净。主要是控制responseBody的数据。</p><p>首先判断 <code>options.custom</code> 是不是一个函数，若不是则提示类型错误。</p><p>然后如果存在 <code>ctx._returnRaw</code> 为 <code>true</code>，则直接返回 <code>ctx.body</code> 。</p><a id="more"></a><p>否则，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> status = ctx.status</span><br><span class="line"><span class="keyword">const</span> data = ctx.body</span><br><span class="line"><span class="comment">// 忽略 method = option and status = 404</span></span><br><span class="line"><span class="keyword">if</span> (ctx.method.toLowerCase !== <span class="string">'option'</span> &amp;&amp; status !== <span class="number">404</span>) &#123;</span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    ok: <span class="literal">true</span>,</span><br><span class="line">    data: data,</span><br><span class="line">    version: options.version || version || <span class="string">'1.0.0'</span>,</span><br><span class="line">    now: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (custom) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(ctx.body, custom(ctx))</span><br><span class="line">  &#125;</span><br><span class="line">  ctx.status = status</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果应用运行错误，则在 <code>ctx.body</code> 中加入 <code>statck: e.stack</code> 。</p><p>配置了 <code>options.debug = true</code> ，则不显示 <code>ctx.body.stack</code> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代码比较简单，干净。主要是控制responseBody的数据。&lt;/p&gt;
&lt;p&gt;首先判断 &lt;code&gt;options.custom&lt;/code&gt; 是不是一个函数，若不是则提示类型错误。&lt;/p&gt;
&lt;p&gt;然后如果存在 &lt;code&gt;ctx._returnRaw&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt;，则直接返回 &lt;code&gt;ctx.body&lt;/code&gt; 。&lt;/p&gt;
    
    </summary>
    
      <category term="Koa" scheme="http://yoursite.com/categories/Koa/"/>
    
    
      <category term="koa" scheme="http://yoursite.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>Koa系列-i18n：koa-i18n</title>
    <link href="http://yoursite.com/2019/03/28/koa/koa-i18n/"/>
    <id>http://yoursite.com/2019/03/28/koa/koa-i18n/</id>
    <published>2019-03-28T06:12:30.000Z</published>
    <updated>2019-03-28T06:37:41.306Z</updated>
    
    <content type="html"><![CDATA[<p>首先是使用了 <code>i18n-2</code> ，这个模块意指被设计给 <code>Express</code> 开箱即用。但这个模块是fork了 <code>i18n</code> 。所以想要看具体的配置用法，得去搜索 <code>i18n</code> 。除此之外，这个中间件必须得搭配 <code>koa-locale</code> 一起使用。</p><p>首先定义 <code>LOCALE_METHODS</code> ,其值的意思是有几种使用 <code>i18n</code> 的方式，分别是 <code>Subdomain</code> , <code>Cookie</code> , <code>Header</code> , <code>Query</code> , <code>Url</code> , <code>TL</code> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> LOCALE_METHODS = [</span><br><span class="line">  <span class="string">'Subdomain'</span>,</span><br><span class="line">  <span class="string">'Cookie'</span>,</span><br><span class="line">  <span class="string">'Header'</span>,</span><br><span class="line">  <span class="string">'Query'</span>,</span><br><span class="line">  <span class="string">'Url'</span>,</span><br><span class="line">  <span class="string">'TLD'</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> SET_PREFIX = <span class="string">'setLocaleFrom'</span></span><br><span class="line"><span class="keyword">const</span> GET_PREFIX = <span class="string">'getLocaleFrom'</span></span><br></pre></td></tr></table></figure><p>然后再定义类 <code>I18n</code> 继承 <code>I18n2</code> ，通过配置选项得到 <code>modes</code> 和 <code>whitelist</code> 。</p><a id="more"></a><p>然后将 <code>LOCALE_METHODS</code> 通过循环将 <code>SET_PREFIX + val</code> 分别挂载到 <code>I18n.prototype</code> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">LOCALE_METHODS.forEach(<span class="function">(<span class="params">m</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(I18n.prototype, SET_PREFIX + m, &#123;</span><br><span class="line">    value: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> locale = getLocale(<span class="keyword">this</span>.request[GET_PREFIX + m]())</span><br><span class="line">      <span class="keyword">if</span> (locale === <span class="keyword">this</span>.getLocale()) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      <span class="keyword">if</span> ((locale = filter(locale, <span class="keyword">this</span>.locales))) &#123;</span><br><span class="line">        <span class="keyword">this</span>.setLocale(locale)</span><br><span class="line">        debug(<span class="string">'Overriding locale from %s : %s'</span>, m.toLowerCase(), locale)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>定义函数 <code>ial</code></p><p>在 <code>app.context</code> 上定义 <code>i18n</code> 属性，其 <code>get</code> 函数为类 <code>I18n</code> 的实例。<br>也给 <code>app.crequest</code> 上定义了 <code>i18n</code> 属性。</p><p>最后通过 <code>whitelist</code> 筛选出不需要的 <code>i18n</code> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">i18nMiddleware</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">  ctx.i18n.whitelist.some(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> customLocaleMethod = <span class="keyword">typeof</span> key === <span class="string">'function'</span></span><br><span class="line">      &amp;&amp; ctx.i18n.setLocale(key.apply(ctx))</span><br><span class="line">    <span class="keyword">if</span> (customLocaleMethod || ctx.i18n[SET_PREFIX + key]()) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerMethods</span>(<span class="params">helpers, i18n</span>) </span>&#123;</span><br><span class="line">  I18n.resMethods.forEach(<span class="function"><span class="params">method</span> =&gt;</span> &#123;</span><br><span class="line">    helpers[method] = i18n[method].bind(i18n)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 得到当前locale值的小写</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLocale</span>(<span class="params">locale</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (locale || <span class="string">''</span>).toLowerCase()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 筛选locale</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">locale, locales</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> k <span class="keyword">in</span> locales) &#123;</span><br><span class="line">    <span class="keyword">if</span> (locale === k.toLowerCase()) &#123;</span><br><span class="line">      <span class="keyword">return</span> k</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先是使用了 &lt;code&gt;i18n-2&lt;/code&gt; ，这个模块意指被设计给 &lt;code&gt;Express&lt;/code&gt; 开箱即用。但这个模块是fork了 &lt;code&gt;i18n&lt;/code&gt; 。所以想要看具体的配置用法，得去搜索 &lt;code&gt;i18n&lt;/code&gt; 。除此之外，这个中间件必须得搭配 &lt;code&gt;koa-locale&lt;/code&gt; 一起使用。&lt;/p&gt;
&lt;p&gt;首先定义 &lt;code&gt;LOCALE_METHODS&lt;/code&gt; ,其值的意思是有几种使用 &lt;code&gt;i18n&lt;/code&gt; 的方式，分别是 &lt;code&gt;Subdomain&lt;/code&gt; , &lt;code&gt;Cookie&lt;/code&gt; , &lt;code&gt;Header&lt;/code&gt; , &lt;code&gt;Query&lt;/code&gt; , &lt;code&gt;Url&lt;/code&gt; , &lt;code&gt;TL&lt;/code&gt; 。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; LOCALE_METHODS = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;Subdomain&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;Cookie&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;Header&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;Query&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;Url&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;TLD&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; SET_PREFIX = &lt;span class=&quot;string&quot;&gt;&#39;setLocaleFrom&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; GET_PREFIX = &lt;span class=&quot;string&quot;&gt;&#39;getLocaleFrom&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后再定义类 &lt;code&gt;I18n&lt;/code&gt; 继承 &lt;code&gt;I18n2&lt;/code&gt; ，通过配置选项得到 &lt;code&gt;modes&lt;/code&gt; 和 &lt;code&gt;whitelist&lt;/code&gt; 。&lt;/p&gt;
    
    </summary>
    
      <category term="Koa" scheme="http://yoursite.com/categories/Koa/"/>
    
    
      <category term="koa" scheme="http://yoursite.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>Koa系列-Analytics：koa-analytics</title>
    <link href="http://yoursite.com/2019/03/27/koa/koa-analytics/"/>
    <id>http://yoursite.com/2019/03/27/koa/koa-analytics/</id>
    <published>2019-03-27T06:15:29.000Z</published>
    <updated>2019-03-27T06:20:06.938Z</updated>
    
    <content type="html"><![CDATA[<p>主要是来收集应用的数据，分析应用的数据。使用了模块 <code>snippet</code> 。</p><p>并通过 <code>combined-stream</code> 将 <code>ctx.body</code> 和 分析应用带js的 <code>html</code> 文件合并在一起，作为响应。</p><p>如果没有 <code>ctx.body</code> 和 <code>content-type !== &#39;html</code> 则直接返回</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;主要是来收集应用的数据，分析应用的数据。使用了模块 &lt;code&gt;snippet&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;并通过 &lt;code&gt;combined-stream&lt;/code&gt; 将 &lt;code&gt;ctx.body&lt;/code&gt; 和 分析应用带js的
        
      
    
    </summary>
    
      <category term="Koa" scheme="http://yoursite.com/categories/Koa/"/>
    
    
      <category term="koa" scheme="http://yoursite.com/tags/koa/"/>
    
  </entry>
  
</feed>
