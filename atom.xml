<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青蛙蛤蟆兽</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-11T02:12:40.140Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yupeilin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Koa系列-Error reporting：koa-error</title>
    <link href="http://yoursite.com/2019/03/11/koa/koa-error/"/>
    <id>http://yoursite.com/2019/03/11/koa/koa-error/</id>
    <published>2019-03-11T01:50:10.000Z</published>
    <updated>2019-03-11T02:12:40.140Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">ctx,next</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选项 <code>opts</code> 有 <code>env</code> , <code>ctx</code> , <code>request</code> , <code>response</code> , <code>error</code> , <code>stack</code> ,<code>status</code> , <code>code</code> 这几个选项，可以覆盖默认参数。</p><p>通过模块引擎整合库 <code>consolidate</code> 可以选择不同的模板引擎。</p><p>返回的async函数，首先判断是否 <code>status</code> 为400，否则就根据 <code>ctx.accepts</code> 的值（’text’,’json’,’html’)来执行相对应的代码。</p><p>若为 <code>html</code> ，则通过 <code>consolidate</code> 生成 <code>error html</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span
        
      
    
    </summary>
    
      <category term="Koa" scheme="http://yoursite.com/categories/Koa/"/>
    
    
      <category term="koa" scheme="http://yoursite.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>HyperApp源码解析</title>
    <link href="http://yoursite.com/2019/02/14/HyperApp/"/>
    <id>http://yoursite.com/2019/02/14/HyperApp/</id>
    <published>2019-02-14T06:28:51.000Z</published>
    <updated>2019-02-14T06:32:23.171Z</updated>
    
    <content type="html"><![CDATA[<p>version: 1.2.9</p><p>两个函数：<code>h</code> 和 <code>app</code>。</p><p><code>h</code> 是用来转化编译后的 <code>jsx</code> 的具体函数。</p><p><code>app</code> 是用来连接 <code>state</code> , <code>actions</code> 和 <code>view</code> ，生成dom节点，挂载到 <code>container</code> ，最终得到具体视图。</p><pre><code>在逐渐深入了解下，深感此框架特别灵活</code></pre><h2 id="函数-h"><a href="#函数-h" class="headerlink" title="函数 h"></a>函数 <code>h</code></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; name 元素名</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; attributes 元素属性</span></span><br><span class="line"><span class="comment"> * @param &#123;Array|String&#125; children 子元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params">name, attributes</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> rest = []</span><br><span class="line">  <span class="keyword">var</span> children = []</span><br><span class="line">  <span class="keyword">var</span> length = <span class="built_in">arguments</span>.length</span><br><span class="line">  <span class="comment">// 除了 name and attributes ， 其余参数 push rest</span></span><br><span class="line">  <span class="keyword">while</span> (length-- &gt; <span class="number">2</span>) rest.push(<span class="built_in">arguments</span>[length])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (rest.length) &#123;</span><br><span class="line">    <span class="keyword">var</span> node = rest.pop()</span><br><span class="line">    <span class="comment">// 判断该元素是否为数组</span></span><br><span class="line">    <span class="keyword">if</span> (node &amp;&amp; node.pop) &#123;</span><br><span class="line">      <span class="keyword">for</span> (length = node.length; length--; ) &#123;</span><br><span class="line">        rest.push(node[length])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node != <span class="literal">null</span> &amp;&amp; node !== <span class="literal">true</span> &amp;&amp; node !== <span class="literal">false</span>) &#123;</span><br><span class="line">      children.push(node)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果该元素类型是函数，则该元素是一个自定义JSX函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> name === <span class="string">"function"</span></span><br><span class="line">    ? name(attributes || &#123;&#125;, children)</span><br><span class="line">    : &#123;</span><br><span class="line">        nodeName: name,</span><br><span class="line">        attributes: attributes || &#123;&#125;,</span><br><span class="line">        children: children,</span><br><span class="line">        key: attributes &amp;&amp; attributes.key</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="函数-app"><a href="#函数-app" class="headerlink" title="函数 app"></a>函数 <code>app</code></h2><p>有四个参数，分别是 <code>state</code> , <code>actions</code> , <code>view</code> , <code>container</code>。</p><p><code>state</code> : 表示应用的所有数据</p><p><code>actions</code> : 改变state的唯一方式是通过此动作</p><p><code>view</code> : 应用程序的视图，可以连接 <code>state</code> 和 <code>actions</code></p><p><code>container</code> : 一个dom元素，需要在其上挂载应用</p><h4 id="函数内部"><a href="#函数内部" class="headerlink" title="函数内部"></a>函数内部</h4><p>首先定义了7个变量，分明是：</p><p><code>map &lt;Function&gt;</code> : 提取 <code>Array.map</code></p><p><code>rootElement &lt;Object&gt;</code> : 根元素</p><p><code>oldNode &lt;Object&gt;</code> : 旧的节点</p><p><code>lifecycle &lt;Array&gt;</code> : 生命周期</p><p><code>skipRender &lt;undefined&gt;</code> : 跳过渲染</p><p><code>isRecycling &lt;Boolean&gt;</code> : 是否循环</p><p><code>globalState &lt;Object&gt;</code> : 全局状态</p><p><code>wiredActions &lt;Object&gt;</code> : 有线动作</p><p>接着执行函数 <code>scheduleRender</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  调度render</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scheduleRender</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// skipRender初始为undefined，所以if语句为true，继续执行</span></span><br><span class="line">  <span class="keyword">if</span> (!skipRender) &#123;</span><br><span class="line">    skipRender = <span class="literal">true</span></span><br><span class="line">    setTimeout(render)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>因为使用了 <code>setTimeout</code> ,所以在定时器到期后执行 <code>render</code>。(具体浏览器Event Loop)</strong></p><p>最后返回 <code>wiredActions</code>。</p><p><code>wiredActions</code> 的获取是通过函数 <code>wireStateToActions</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param &#123;Array&#125; path </span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; state </span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; actions </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wireStateToActions</span>(<span class="params">path, state, actions</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 遍历actions</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> actions) &#123;</span><br><span class="line">    <span class="comment">// 判断actions[key]的类型</span></span><br><span class="line">    <span class="comment">// 不是function，即actions嵌套在命名空间中</span></span><br><span class="line">    <span class="keyword">typeof</span> actions[key] === <span class="string">"function"</span></span><br><span class="line">      ? (<span class="function"><span class="keyword">function</span>(<span class="params">key, action</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// 使用IIFE，重新定义actions[key]，连接state和actions[key]</span></span><br><span class="line">          actions[key] = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 操作时执行</span></span><br><span class="line">            <span class="comment">// 返回操作后的结果</span></span><br><span class="line">            ...</span><br><span class="line">            ...</span><br><span class="line">            ...</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)(key, actions[key])</span><br><span class="line">      : wireStateToActions(</span><br><span class="line">          path.concat(key),</span><br><span class="line">          (state[key] = clone(state[key])),</span><br><span class="line">          (actions[key] = clone(actions[key]))</span><br><span class="line">        )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> actions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="辅助函数-clone"><a href="#辅助函数-clone" class="headerlink" title="辅助函数 clone"></a>辅助函数 <code>clone</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浅拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">target, source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> out = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> target) out[i] = target[i]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> source) out[i] = source[i]</span><br><span class="line">  <span class="keyword">return</span> out</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="函数-recycleElement"><a href="#函数-recycleElement" class="headerlink" title="函数 recycleElement"></a>函数 <code>recycleElement</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主要用于判断节点类型是否为TEXT</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recycleElement</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    nodeName: element.nodeName.toLowerCase(),</span><br><span class="line">    attributes: &#123;&#125;,</span><br><span class="line">    children: map.call(element.childNodes, <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> element.nodeType === <span class="number">3</span> <span class="comment">// Node.TEXT_NODE</span></span><br><span class="line">        ? element.nodeValue</span><br><span class="line">        : recycleElement(element)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>具体为什么要使用setTimeout，返回wiredActions的意义是什么</em></p><p>定时器到期执行函数 <code>render</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// old: skipRender = true , new: skipRender = false</span></span><br><span class="line">  skipRender = !skipRender</span><br><span class="line">  <span class="comment">// 生成节点</span></span><br><span class="line">  <span class="keyword">var</span> node = resolveNode(view) <span class="comment">// resolveNode见下文</span></span><br><span class="line">  <span class="comment">// container是必须的，!skipRender = true</span></span><br><span class="line">  <span class="keyword">if</span> (container &amp;&amp; !skipRender) &#123;</span><br><span class="line">    <span class="comment">// 生成虚拟dom</span></span><br><span class="line">    rootElement = patch(container, rootElement, oldNode, (oldNode = node))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  isRecycling = <span class="literal">false</span></span><br><span class="line">  <span class="comment">// 判断是否存在生命周期，如果有，则一个接一个执行</span></span><br><span class="line">  <span class="keyword">while</span> (lifecycle.length) lifecycle.pop()()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="函数-resolve"><a href="#函数-resolve" class="headerlink" title="函数 resolve"></a>函数 <code>resolve</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断node是否是个函数，是函数即转化，不是则返回此node (view = (state,actions) =&gt; 视图)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolveNode</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> node === <span class="string">"function"</span></span><br><span class="line">    ? resolveNode(node(globalState, wiredActions))</span><br><span class="line">    : node != <span class="literal">null</span></span><br><span class="line">      ? node</span><br><span class="line">      : <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="函数-patch"><a href="#函数-patch" class="headerlink" title="函数 patch"></a>函数 <code>patch</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">patch</span>(<span class="params">parent, element, oldNode, node, isSvg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (node === oldNode) &#123;</span><br><span class="line">    <span class="comment">// 新旧节点一样</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldNode == <span class="literal">null</span> || oldNode.nodeName !== node.nodeName) &#123;</span><br><span class="line">    <span class="comment">// 老节点 == null 或者 新旧节点nodeName不一样，初始时执行</span></span><br><span class="line">    <span class="keyword">var</span> newElement = createElement(node, isSvg) <span class="comment">// createElement见下文</span></span><br><span class="line">    <span class="comment">// 将虚拟dom插入到跟节点中，渲染视图</span></span><br><span class="line">    parent.insertBefore(newElement, element)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oldNode != <span class="literal">null</span>) &#123;</span><br><span class="line">      removeElement(parent, element, oldNode) <span class="comment">// removeElement见下文</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    element = newElement</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldNode.nodeName == <span class="literal">null</span>) &#123;</span><br><span class="line">    element.nodeValue = node</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> element</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="创建元素函数-createElement"><a href="#创建元素函数-createElement" class="headerlink" title="创建元素函数 createElement"></a>创建元素函数 <code>createElement</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据babel转化jsx之后的node，创建虚拟dom节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">node, isSvg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> element =</span><br><span class="line">    <span class="keyword">typeof</span> node === <span class="string">"string"</span> || <span class="keyword">typeof</span> node === <span class="string">"number"</span></span><br><span class="line">      ? <span class="built_in">document</span>.createTextNode(node)</span><br><span class="line">      : (isSvg = isSvg || node.nodeName === <span class="string">"svg"</span>)</span><br><span class="line">        ? <span class="built_in">document</span>.createElementNS(</span><br><span class="line">            <span class="string">"http://www.w3.org/2000/svg"</span>,</span><br><span class="line">            node.nodeName</span><br><span class="line">          )</span><br><span class="line">        : <span class="built_in">document</span>.createElement(node.nodeName)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> attributes = node.attributes</span><br><span class="line">  <span class="comment">// 该节点属性</span></span><br><span class="line">  <span class="keyword">if</span> (attributes) &#123;</span><br><span class="line">    <span class="comment">// oncreate</span></span><br><span class="line">    <span class="keyword">if</span> (attributes.oncreate) &#123;</span><br><span class="line">      lifecycle.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        attributes.oncreate(element)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 该node下有children</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; node.children.length; i++) &#123;</span><br><span class="line">      element.appendChild(</span><br><span class="line">        createElement(</span><br><span class="line">          (node.children[i] = resolveNode(node.children[i])),</span><br><span class="line">          isSvg</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> attributes) &#123;</span><br><span class="line">      <span class="comment">// 更新节点属性</span></span><br><span class="line">      updateAttribute(element, name, attributes[name], <span class="literal">null</span>, isSvg) <span class="comment">// updateAttribute见下文</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="更新属性函数-updateAttribute"><a href="#更新属性函数-updateAttribute" class="headerlink" title="更新属性函数 updateAttribute"></a>更新属性函数 <code>updateAttribute</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateAttribute</span>(<span class="params">element, name, value, oldValue, isSvg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">"key"</span>) &#123;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name === <span class="string">"style"</span>) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 样式有两种形式，string 和 object</span></span><br><span class="line"><span class="comment">     * 是string, 赋值给element.style.cssText</span></span><br><span class="line"><span class="comment">     * 是object, 将oldValue和element.style.cssText为空，然后设置样式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">"string"</span>) &#123;</span><br><span class="line">      element.style.cssText = value</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> oldValue === <span class="string">"string"</span>) oldValue = element.style.cssText = <span class="string">""</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> clone(oldValue, value)) &#123;</span><br><span class="line">        <span class="keyword">var</span> style = value == <span class="literal">null</span> || value[i] == <span class="literal">null</span> ? <span class="string">""</span> : value[i]</span><br><span class="line">        <span class="keyword">if</span> (i[<span class="number">0</span>] === <span class="string">"-"</span>) &#123;</span><br><span class="line">          element.style.setProperty(i, style)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          element.style[i] = style</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 方法，已on开头</span></span><br><span class="line">    <span class="keyword">if</span> (name[<span class="number">0</span>] === <span class="string">"o"</span> &amp;&amp; name[<span class="number">1</span>] === <span class="string">"n"</span>) &#123;</span><br><span class="line">      name = name.slice(<span class="number">2</span>)</span><br><span class="line">      <span class="comment">// 该元素存在events</span></span><br><span class="line">      <span class="keyword">if</span> (element.events) &#123;</span><br><span class="line">        <span class="comment">// oldValue不存在</span></span><br><span class="line">        <span class="keyword">if</span> (!oldValue) oldValue = element.events[name]</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化元素事件</span></span><br><span class="line">        element.events = &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 给元素添加新事件</span></span><br><span class="line">      element.events[name] = value</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!oldValue) &#123;</span><br><span class="line">          element.addEventListener(name, eventListener) <span class="comment">// eventLister见下文</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        element.removeEventListener(name, eventListener)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">      <span class="comment">// 其他属性</span></span><br><span class="line">      name <span class="keyword">in</span> element &amp;&amp;</span><br><span class="line">      name !== <span class="string">"list"</span> &amp;&amp;</span><br><span class="line">      name !== <span class="string">"type"</span> &amp;&amp;</span><br><span class="line">      name !== <span class="string">"draggable"</span> &amp;&amp;</span><br><span class="line">      name !== <span class="string">"spellcheck"</span> &amp;&amp;</span><br><span class="line">      name !== <span class="string">"translate"</span> &amp;&amp;</span><br><span class="line">      !isSvg</span><br><span class="line">    ) &#123;</span><br><span class="line">      element[name] = value == <span class="literal">null</span> ? <span class="string">""</span> : value</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value != <span class="literal">null</span> &amp;&amp; value !== <span class="literal">false</span>) &#123;</span><br><span class="line">      element.setAttribute(name, value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span> || value === <span class="literal">false</span>) &#123;</span><br><span class="line">      element.removeAttribute(name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="函数-eventListener"><a href="#函数-eventListener" class="headerlink" title="函数 eventListener"></a>函数 <code>eventListener</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * event.currentTarget 当前注册事件的对象的引用</span></span><br><span class="line"><span class="comment"> * event.currentTarget.events 已在函数 `updateAttribute` 定义</span></span><br><span class="line"><span class="comment"> * event.type 事件类型</span></span><br><span class="line"><span class="comment"> * 最后传入 event，得到预期效果</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eventListener</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> event.currentTarget.events[event.type](event)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="函数-removeElement"><a href="#函数-removeElement" class="headerlink" title="函数 removeElement"></a>函数 <code>removeElement</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeElement</span>(<span class="params">parent, element, node</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">done</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    parent.removeChild(removeChildren(element, node)) <span class="comment">// 见下文</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断属性是否有onremove</span></span><br><span class="line">  <span class="keyword">var</span> cb = node.attributes &amp;&amp; node.attributes.onremove</span><br><span class="line">  <span class="keyword">if</span> (cb) &#123;</span><br><span class="line">    cb(element, done)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    done()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="函数-removeChildren"><a href="#函数-removeChildren" class="headerlink" title="函数 removeChildren"></a>函数 <code>removeChildren</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeChildren</span>(<span class="params">element, node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> attributes = node.attributes</span><br><span class="line">  <span class="keyword">if</span> (attributes) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; node.children.length; i++) &#123;</span><br><span class="line">      <span class="comment">// 递归</span></span><br><span class="line">      removeChildren(element.childNodes[i], node.children[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断属性是否有ondestory</span></span><br><span class="line">    <span class="keyword">if</span> (attributes.ondestroy) &#123;</span><br><span class="line">      attributes.ondestroy(element)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> element</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此上为初始化，创建虚拟dom，挂载节点，生成元素。</p><p>当执行一个操作，发起一个action时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wireStateToActions</span>(<span class="params">path, state, actions</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">typeof</span> actions[key] === <span class="string">"function"</span></span><br><span class="line">    <span class="comment">// 使用IIFE，将actions[key]重新封装</span></span><br><span class="line">    ? (<span class="function"><span class="keyword">function</span>(<span class="params">key, action</span>) </span>&#123;</span><br><span class="line">        actions[key] = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// action(data)，执行第一层函数，返回第二层函数</span></span><br><span class="line">          <span class="keyword">var</span> result = action(data)</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> result === <span class="string">"function"</span>) &#123;</span><br><span class="line">            <span class="comment">// 执行完返回后结果</span></span><br><span class="line">            result = result(getPartialState(path, globalState), actions) <span class="comment">// getPartialState见下文</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (</span><br><span class="line">            result &amp;&amp;</span><br><span class="line">            result !== (state = getPartialState(path, globalState)) &amp;&amp;</span><br><span class="line">            !result.then <span class="comment">// !isPromise</span></span><br><span class="line">          ) &#123;</span><br><span class="line">            <span class="comment">// 再一次调度render</span></span><br><span class="line">            scheduleRender(</span><br><span class="line">              (globalState = setPartialState(</span><br><span class="line">                path,</span><br><span class="line">                clone(state, result),</span><br><span class="line">                globalState</span><br><span class="line">              )) <span class="comment">// setPartialState见下文</span></span><br><span class="line">            )</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)(key, actions[key])</span><br><span class="line">    : ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="函数-getPartialState"><a href="#函数-getPartialState" class="headerlink" title="函数 getPartialState"></a>函数 <code>getPartialState</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命名空间</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPartialState</span>(<span class="params">path, source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (i &lt; path.length) &#123;</span><br><span class="line">    source = source[path[i++]]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> source</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="函数-setPartialState"><a href="#函数-setPartialState" class="headerlink" title="函数 setPartialState"></a>函数 <code>setPartialState</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setPartialState</span>(<span class="params">path, value, source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> target = &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> (path.length) &#123;</span><br><span class="line">    target[path[<span class="number">0</span>]] =</span><br><span class="line">      path.length &gt; <span class="number">1</span></span><br><span class="line">        ? setPartialState(path.slice(<span class="number">1</span>), value, source[path[<span class="number">0</span>]])</span><br><span class="line">        : value</span><br><span class="line">    <span class="keyword">return</span> clone(source, target)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后执行 <code>scheduleRender</code> ，更新虚拟dom，生成最新视图。<br>这时，<code>rootElement</code> 是一个虚拟dom。</p><h5 id="函数-patch-1"><a href="#函数-patch-1" class="headerlink" title="函数 patch"></a>函数 <code>patch</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">patch</span>(<span class="params">parent, element, oldNode, node, isSvg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (node === oldNode) &#123;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldNode == <span class="literal">null</span> || oldNode.nodeName !== node.nodeName) &#123;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    updateElement(</span><br><span class="line">      element,</span><br><span class="line">      oldNode.attributes,</span><br><span class="line">      node.attributes,</span><br><span class="line">      (isSvg = isSvg || node.nodeName === <span class="string">"svg"</span>)</span><br><span class="line">    ) <span class="comment">// updateElement见下文</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> oldKeyed = &#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> newKeyed = &#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> oldElements = []</span><br><span class="line">    <span class="keyword">var</span> oldChildren = oldNode.children</span><br><span class="line">    <span class="keyword">var</span> children = node.children</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; oldChildren.length; i++) &#123;</span><br><span class="line">      oldElements[i] = element.childNodes[i]</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> oldKey = getKey(oldChildren[i]) <span class="comment">// getKey见下文</span></span><br><span class="line">      <span class="comment">// 存在key，</span></span><br><span class="line">      <span class="keyword">if</span> (oldKey != <span class="literal">null</span>) &#123;</span><br><span class="line">        oldKeyed[oldKey] = [oldElements[i], oldChildren[i]]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> k = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 判断子节点是否需要更新，根据key值</span></span><br><span class="line">    <span class="keyword">while</span> (k &lt; children.length) &#123;</span><br><span class="line">      <span class="keyword">var</span> oldKey = getKey(oldChildren[i])</span><br><span class="line">      <span class="keyword">var</span> newKey = getKey((children[k] = resolveNode(children[k])))</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (newKeyed[oldKey]) &#123;</span><br><span class="line">        i++</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (newKey != <span class="literal">null</span> &amp;&amp; newKey === getKey(oldChildren[i + <span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldKey == <span class="literal">null</span>) &#123;</span><br><span class="line">          removeElement(element, oldElements[i], oldChildren[i])</span><br><span class="line">        &#125;</span><br><span class="line">        i++</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (newKey == <span class="literal">null</span> || isRecycling) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldKey == <span class="literal">null</span>) &#123;</span><br><span class="line">          patch(element, oldElements[i], oldChildren[i], children[k], isSvg)</span><br><span class="line">          k++</span><br><span class="line">        &#125;</span><br><span class="line">        i++</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> keyedNode = oldKeyed[newKey] || []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (oldKey === newKey) &#123;</span><br><span class="line">          patch(element, keyedNode[<span class="number">0</span>], keyedNode[<span class="number">1</span>], children[k], isSvg)</span><br><span class="line">          i++</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (keyedNode[<span class="number">0</span>]) &#123;</span><br><span class="line">          patch(</span><br><span class="line">            element,</span><br><span class="line">            element.insertBefore(keyedNode[<span class="number">0</span>], oldElements[i]),</span><br><span class="line">            keyedNode[<span class="number">1</span>],</span><br><span class="line">            children[k],</span><br><span class="line">            isSvg</span><br><span class="line">          )</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          patch(element, oldElements[i], <span class="literal">null</span>, children[k], isSvg)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        newKeyed[newKey] = children[k]</span><br><span class="line">        k++</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; oldChildren.length) &#123;</span><br><span class="line">      <span class="keyword">if</span> (getKey(oldChildren[i]) == <span class="literal">null</span>) &#123;</span><br><span class="line">        removeElement(element, oldElements[i], oldChildren[i])</span><br><span class="line">      &#125;</span><br><span class="line">      i++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> oldKeyed) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!newKeyed[i]) &#123;</span><br><span class="line">        removeElement(element, oldKeyed[i][<span class="number">0</span>], oldKeyed[i][<span class="number">1</span>])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> element</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="更新元素函数-updateElement"><a href="#更新元素函数-updateElement" class="headerlink" title="更新元素函数 updateElement"></a>更新元素函数 <code>updateElement</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateElement</span>(<span class="params">element, oldAttributes, attributes, isSvg</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// clone(oldAttributes, attributes) 最新节点属性</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> clone(oldAttributes, attributes)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      attributes[name] !==</span><br><span class="line">      (name === <span class="string">"value"</span> || name === <span class="string">"checked"</span></span><br><span class="line">        ? element[name]</span><br><span class="line">        : oldAttributes[name])</span><br><span class="line">    ) &#123;</span><br><span class="line">      updateAttribute(</span><br><span class="line">        element,</span><br><span class="line">        name,</span><br><span class="line">        attributes[name],</span><br><span class="line">        oldAttributes[name],</span><br><span class="line">        isSvg</span><br><span class="line">      ) <span class="comment">// updateAttribute见上文</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 初始时 isRecycling为true，更新时为false</span></span><br><span class="line">  <span class="keyword">var</span> cb = isRecycling ? attributes.oncreate : attributes.onupdate</span><br><span class="line">  <span class="keyword">if</span> (cb) &#123;</span><br><span class="line">    lifecycle.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      cb(element, oldAttributes)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="得到-key-函数-getKey"><a href="#得到-key-函数-getKey" class="headerlink" title="得到 key 函数 getKey"></a>得到 <code>key</code> 函数 <code>getKey</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getKey</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> node ? node.key : <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;version: 1.2.9&lt;/p&gt;
&lt;p&gt;两个函数：&lt;code&gt;h&lt;/code&gt; 和 &lt;code&gt;app&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;h&lt;/code&gt; 是用来转化编译后的 &lt;code&gt;jsx&lt;/code&gt; 的具体函数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;app&lt;/code&gt; 是用来连接 &lt;code&gt;state&lt;/code&gt; , &lt;code&gt;actions&lt;/code&gt; 和 &lt;code&gt;view&lt;/code&gt; ，生成dom节点，挂载到 &lt;code&gt;container&lt;/code&gt; ，最终得到具体视图。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;在逐渐深入了解下，深感此框架特别灵活
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;函数-h&quot;&gt;&lt;a href=&quot;#函数-h&quot; class=&quot;headerlink&quot; title=&quot;函数 h&quot;&gt;&lt;/a&gt;函数 &lt;code&gt;h&lt;/code&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @param &amp;#123;String&amp;#125; name 元素名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @param &amp;#123;Object&amp;#125; attributes 元素属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * @param &amp;#123;Array|String&amp;#125; children 子元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;h&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name, attributes&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; rest = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; children = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; length = &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;.length&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 除了 name and attributes ， 其余参数 push rest&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (length-- &amp;gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) rest.push(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;[length])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (rest.length) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; node = rest.pop()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 判断该元素是否为数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (node &amp;amp;&amp;amp; node.pop) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (length = node.length; length--; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rest.push(node[length])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (node != &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; node !== &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &amp;amp;&amp;amp; node !== &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      children.push(node)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 如果该元素类型是函数，则该元素是一个自定义JSX函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; name === &lt;span class=&quot;string&quot;&gt;&quot;function&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ? name(attributes || &amp;#123;&amp;#125;, children)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    : &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nodeName: name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        attributes: attributes || &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        children: children,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        key: attributes &amp;amp;&amp;amp; attributes.key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Koa系列-Templating：koa-views</title>
    <link href="http://yoursite.com/2019/02/11/koa/koa-views/"/>
    <id>http://yoursite.com/2019/02/11/koa/koa-views/</id>
    <published>2019-02-11T06:54:06.000Z</published>
    <updated>2019-02-14T06:13:10.705Z</updated>
    
    <content type="html"><![CDATA[<p>这个中间件用于模板渲染，以包 <code>consolidate</code> 为默认的渲染引擎集合包，支持多种不同模板引擎。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数设置以及视图的地址，必须使用绝对地址</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">viewsMiddleware</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  path,</span></span></span><br><span class="line"><span class="function"><span class="params">  &#123; engineSource = consolidate, extension = <span class="string">'html'</span>, options = &#123;&#125;, map &#125; = &#123;&#125; </span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">views</span>(<span class="params">ctx,next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断是否存在render函数，有则跳过后续代码</span></span><br><span class="line">    <span class="keyword">if</span>(ctx.render) <span class="keyword">return</span> next()</span><br><span class="line">    ctx.response.render = ctx.render = <span class="function"><span class="keyword">function</span>(<span class="params">relaPath,locals = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 包get-paths用来得到模板引擎视图的绝对路径</span></span><br><span class="line">      <span class="keyword">return</span> getPaths(path, relaPath, extension).then(<span class="function"><span class="params">paths</span> =&gt;</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后就来决定是使用 <code>send</code> 返回默认 <code>.html</code> 文件还是需要使用模板引擎。</p><p>有个小细节就是，是否需要美化代码，是通过 <code>locals.pretty</code> 判断。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;这个中间件用于模板渲染，以包 &lt;code&gt;consolidate&lt;/code&gt; 为默认的渲染引擎集合包，支持多种不同模板引擎。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
        
      
    
    </summary>
    
      <category term="Koa" scheme="http://yoursite.com/categories/Koa/"/>
    
    
      <category term="koa" scheme="http://yoursite.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>Koa系列-Services：koa-orm</title>
    <link href="http://yoursite.com/2019/01/30/koa/koa-orm/"/>
    <id>http://yoursite.com/2019/01/30/koa/koa-orm/</id>
    <published>2019-01-30T02:25:19.000Z</published>
    <updated>2019-01-30T03:02:27.963Z</updated>
    
    <content type="html"><![CDATA[<p>主要通过 <code>sequelize</code> 和 <code>squel</code> 来操作数据库。</p><p>参数 <code>configs</code> 可以是object或者是array，也就是可以有多个database实例。</p><p><code>configs</code> 有一个属性是 <code>modelPath</code> ,用来导入 <code>model</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">sequelize, modelPath</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> models = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Bootstrap models</span></span><br><span class="line">  fs.readdirSync(modelPath) <span class="comment">// 得是个文件夹，应该需要判断</span></span><br><span class="line">    .forEach(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="regexp">/\.js$/</span>.test(file)) &#123;</span><br><span class="line">        <span class="keyword">const</span> model = sequelize.import(join(modelPath, file));</span><br><span class="line">        models[model.name] = model;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.keys(models).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">modelName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (models[modelName].associate) &#123;</span><br><span class="line">      models[modelName].associate(models);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> models;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最后导出 <code>database</code> ，挂载到 <code>ctx.orm</code> 上。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;主要通过 &lt;code&gt;sequelize&lt;/code&gt; 和 &lt;code&gt;squel&lt;/code&gt; 来操作数据库。&lt;/p&gt;
&lt;p&gt;参数 &lt;code&gt;configs&lt;/code&gt;
        
      
    
    </summary>
    
      <category term="Koa" scheme="http://yoursite.com/categories/Koa/"/>
    
    
      <category term="koa" scheme="http://yoursite.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>Koa系列-Caching：koa-etag</title>
    <link href="http://yoursite.com/2019/01/20/koa/koa-etag/"/>
    <id>http://yoursite.com/2019/01/20/koa/koa-etag/</id>
    <published>2019-01-20T07:25:34.000Z</published>
    <updated>2019-01-30T02:27:57.278Z</updated>
    
    <content type="html"><![CDATA[<p>有以下几种情况不能使用 <code>etag</code>：</p><p>1.没有响应实体<br>2.已设置了 <code>etag</code><br>3.http状态码不是 <code>2xx</code><br>4.响应实体是 <code>stream</code> 类型，没有具体路径也不行</p><p>最后是使用了包 <code>etag</code> 生成具体的 <code>etag</code></p><p>参考: <a href="https://www.cnblogs.com/etoah/p/5579622.html" target="_blank" rel="noopener">浏览器缓存</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;有以下几种情况不能使用 &lt;code&gt;etag&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;1.没有响应实体&lt;br&gt;2.已设置了 &lt;code&gt;etag&lt;/code&gt;&lt;br&gt;3.http状态码不是 &lt;code&gt;2xx&lt;/code&gt;&lt;br&gt;4.响应实体是
        
      
    
    </summary>
    
      <category term="Koa" scheme="http://yoursite.com/categories/Koa/"/>
    
    
      <category term="koa" scheme="http://yoursite.com/tags/koa/"/>
    
  </entry>
  
</feed>
