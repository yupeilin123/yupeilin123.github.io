<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青蛙蛤蟆兽</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-13T14:02:27.769Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yupeilin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Koa系列-HTTP2：koa-server-push</title>
    <link href="http://yoursite.com/2019/01/13/koa/koa-server-push/"/>
    <id>http://yoursite.com/2019/01/13/koa/koa-server-push/</id>
    <published>2019-01-13T13:35:40.000Z</published>
    <updated>2019-01-13T14:02:27.769Z</updated>
    
    <content type="html"><![CDATA[<p>在使用http2协议的情况下，开启server push之后，server通过X-Associated-Content header（X-开头的header都属于非标准的，自定义header）告知客户端会有新的内容推送过来。在用户第一次打开网站首页的时候，server将资源主动推送过来可以极大的提升用户体验。</p><p>该模板通过默认的文件名去读取内容，或者是设置读取内容的文件名。</p><p>通过设置http head的Link，添加代理。</p><p>参考：<a href="https://github.com/amandakelake/blog/issues/35" target="_blank" rel="noopener">http2的前生今世</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在使用http2协议的情况下，开启server push之后，server通过X-Associated-Content
        
      
    
    </summary>
    
      <category term="Koa" scheme="http://yoursite.com/categories/Koa/"/>
    
    
      <category term="koa" scheme="http://yoursite.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>每周npm模块源码解读：mz</title>
    <link href="http://yoursite.com/2018/12/27/npm/mz/"/>
    <id>http://yoursite.com/2018/12/27/npm/mz/</id>
    <published>2018-12-27T14:43:13.000Z</published>
    <updated>2018-12-27T15:00:43.100Z</updated>
    
    <content type="html"><![CDATA[<p><strong>周2018.12.24 ~ 2018.12.30</strong></p><h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>模块名：<code>mz</code></p><p>github: <a href="https://github.com/normalize/mz" target="_blank" rel="noopener">https://github.com/normalize/mz</a></p><p>描述：将node.js的某些模块promisify化</p><p>适合人群：至少看过一遍源码</p><a id="more"></a><h5 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h5><pre><code>现在的node最新稳定版本10.15.0，已经提供了把node模块promisify的函数了。</code></pre><p>将 <code>fs</code>, <code>dns</code>, <code>zlib</code>, <code>crypto</code>, <code>readline</code>, <code>child_process</code> 这些模块的方法promisify化。</p><p>主要是借助 <code>thenify-all</code> 和 <code>any-promise</code> 的帮助。</p><p>有两点需要注意的：</p><p>一个是模块 <code>fs</code> ，重写了 <code>fs.exits</code>。但该方法已经废弃了。该方法实则使用是调用 <code>fs.stat</code>。</p><p>另外一个是模块 <code>readline</code> ，重写了 <code>readline.Interface</code>。兼容以前的版本？覆盖 <code>question</code> ，在这边使用了 <code>promise</code>。</p><h5 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h5><p>在那个年代，把常用的node模块promisfy还是很有用的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;周2018.12.24 ~ 2018.12.30&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h5&gt;&lt;p&gt;模块名：&lt;code&gt;mz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;github: &lt;a href=&quot;https://github.com/normalize/mz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/normalize/mz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;描述：将node.js的某些模块promisify化&lt;/p&gt;
&lt;p&gt;适合人群：至少看过一遍源码&lt;/p&gt;
    
    </summary>
    
      <category term="npm" scheme="http://yoursite.com/categories/npm/"/>
    
    
      <category term="NPM" scheme="http://yoursite.com/tags/NPM/"/>
    
  </entry>
  
  <entry>
    <title>Koa系列-SPDY：koa-file-server</title>
    <link href="http://yoursite.com/2018/12/26/koa/koa-file-server/"/>
    <id>http://yoursite.com/2018/12/26/koa/koa-file-server/</id>
    <published>2018-12-26T07:50:45.000Z</published>
    <updated>2018-12-27T14:43:37.989Z</updated>
    
    <content type="html"><![CDATA[<p>这个中间件已经不再维护。</p><p>这个中间件使用了SPDY，但现在已经被HTTP2取代了。</p><p>源代码还是挺好理解的。大致说一下。</p><p>通过将文件的信息存储到内存中。当再次请求就可以判断内存是否存在此请求时存在的文件，否则则去设置文件的信息。</p><p>在设置文件的信息中，通过管道流的方式将文件转化为一个gizp的文件。</p><p>并且用到了 <code>SPDY</code> 的高级特征：服务器启动流。服务器启动流能用来分发内容到客户端，而不需要客户端发起请求。主要由模块 <code>spdy-push</code> 实现。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;这个中间件已经不再维护。&lt;/p&gt;
&lt;p&gt;这个中间件使用了SPDY，但现在已经被HTTP2取代了。&lt;/p&gt;
&lt;p&gt;源代码还是挺好理解的。大致说一下。&lt;/p&gt;
&lt;p&gt;通过将文件的信息存储到内存中。当再次请求就可以判断内存是否存在此请求时存在的文件，否则则去设置文件的信息。&lt;/p
        
      
    
    </summary>
    
      <category term="Koa" scheme="http://yoursite.com/categories/Koa/"/>
    
    
      <category term="koa" scheme="http://yoursite.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>浮生闲读</title>
    <link href="http://yoursite.com/2018/12/24/book/%E6%B5%AE%E7%94%9F%E9%97%B2%E8%AF%BB/"/>
    <id>http://yoursite.com/2018/12/24/book/浮生闲读/</id>
    <published>2018-12-24T13:51:14.000Z</published>
    <updated>2018-12-24T14:15:13.206Z</updated>
    
    <content type="html"><![CDATA[<p><strong>2018.12.14 ~ 2018.12.21</strong></p><p><strong>无人生还</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">整个故事讲的的是十个来历不同互不相识的人受邀来到一座海岛发生的一系列事情，岛的名字叫做士兵岛。</span><br><span class="line">从最开始的马尔斯顿的死亡，到罗杰斯太太的死亡，让我以为这座岛上还存在第十一人。</span><br><span class="line">到之中的，法官沃格雷夫和他们一起分析，可能凶手来自他们中的一个。在这之前我就这么认为了。</span><br><span class="line">但是直到最后还是不知道谁是凶手，因为人都死亡了，迎合了开头的一首十个小士兵的童谣。</span><br><span class="line">看到最后才知道，法官劳伦斯·约翰·沃格雷夫，才是欧文先生。知道了整个故事的前因后果。</span><br><span class="line">确实是刺激~~</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;2018.12.14 ~ 2018.12.21&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;无人生还&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;整个故事讲的的是十个来历不同互不相识的人受邀来到一座海岛发生的一系列事情，岛的名字叫做士兵岛。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;从最开始的马尔斯顿的死亡，到罗杰斯太太的死亡，让我以为这座岛上还存在第十一人。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;到之中的，法官沃格雷夫和他们一起分析，可能凶手来自他们中的一个。在这之前我就这么认为了。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;但是直到最后还是不知道谁是凶手，因为人都死亡了，迎合了开头的一首十个小士兵的童谣。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;看到最后才知道，法官劳伦斯·约翰·沃格雷夫，才是欧文先生。知道了整个故事的前因后果。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;确实是刺激~~&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="书" scheme="http://yoursite.com/tags/%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>记录我看过的书</title>
    <link href="http://yoursite.com/2018/12/24/book/%E8%AE%B0%E5%BD%95%E6%88%91%E7%9C%8B%E8%BF%87%E7%9A%84%E4%B9%A6/"/>
    <id>http://yoursite.com/2018/12/24/book/记录我看过的书/</id>
    <published>2018-12-24T13:38:32.000Z</published>
    <updated>2018-12-24T13:49:39.759Z</updated>
    
    <content type="html"><![CDATA[<p>一直以来都挺喜欢看书的，从小学开始看四大名著起，妖魔鬼怪，武侠小说，再之后的长达10年之久的网络小说。</p><p>初中的时候在镇上的图书馆办过借书证，在高中办过市里的借书证，借过几次看过几次，但之后的不再继续，甚至到现在，市里的借书证还在。</p><p>到了大学，接着看书，印象比较深，看了很多本，甚至迷上了哲学。</p><p>现在，仅想记录一下自己的现在开始的读书。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;一直以来都挺喜欢看书的，从小学开始看四大名著起，妖魔鬼怪，武侠小说，再之后的长达10年之久的网络小说。&lt;/p&gt;
&lt;p&gt;初中的时候在镇上的图书馆办过借书证，在高中办过市里的借书证，借过几次看过几次，但之后的不再继续，甚至到现在，市里的借书证还在。&lt;/p&gt;
&lt;p&gt;到了大学，接着
        
      
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="书" scheme="http://yoursite.com/tags/%E4%B9%A6/"/>
    
  </entry>
  
</feed>
