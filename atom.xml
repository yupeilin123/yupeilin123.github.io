<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青蛙蛤蟆兽</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-27T06:20:06.938Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yupeilin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Koa系列-Analytics：koa-analytics</title>
    <link href="http://yoursite.com/2019/03/27/koa/koa-analytics/"/>
    <id>http://yoursite.com/2019/03/27/koa/koa-analytics/</id>
    <published>2019-03-27T06:15:29.000Z</published>
    <updated>2019-03-27T06:20:06.938Z</updated>
    
    <content type="html"><![CDATA[<p>主要是来收集应用的数据，分析应用的数据。使用了模块 <code>snippet</code> 。</p><p>并通过 <code>combined-stream</code> 将 <code>ctx.body</code> 和 分析应用带js的 <code>html</code> 文件合并在一起，作为响应。</p><p>如果没有 <code>ctx.body</code> 和 <code>content-type !== &#39;html</code> 则直接返回</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;主要是来收集应用的数据，分析应用的数据。使用了模块 &lt;code&gt;snippet&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;并通过 &lt;code&gt;combined-stream&lt;/code&gt; 将 &lt;code&gt;ctx.body&lt;/code&gt; 和 分析应用带js的
        
      
    
    </summary>
    
      <category term="Koa" scheme="http://yoursite.com/categories/Koa/"/>
    
    
      <category term="koa" scheme="http://yoursite.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>Koa系列-Metrics：koa-response-time</title>
    <link href="http://yoursite.com/2019/03/27/koa/koa-response-time/"/>
    <id>http://yoursite.com/2019/03/27/koa/koa-response-time/</id>
    <published>2019-03-27T05:30:29.000Z</published>
    <updated>2019-03-27T05:38:16.517Z</updated>
    
    <content type="html"><![CDATA[<p>总体来说比较简单，主要用到了 <code>process.hrtime</code> 这个方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">responseTime</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> hrtime = options &amp;&amp; options.hrtime;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">responseTime</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> start = process.hrtime();</span><br><span class="line">    <span class="keyword">return</span> next().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> delta = process.hrtime(start);</span><br><span class="line">      <span class="comment">// delata是纳秒级别的，所以要转微妙</span></span><br><span class="line">      delta = delta[<span class="number">0</span>] * <span class="number">1000</span> + delta[<span class="number">1</span>] / <span class="number">1000000</span>;</span><br><span class="line">      <span class="keyword">if</span> (!hrtime) &#123;</span><br><span class="line">        <span class="comment">// 转为毫秒</span></span><br><span class="line">        delta = <span class="built_in">Math</span>.round(delta);</span><br><span class="line">      &#125;</span><br><span class="line">      ctx.set(<span class="string">'X-Response-Time'</span>, delta + <span class="string">'ms'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考 <a href="https://nodejs.org/dist/latest-v10.x/docs/api/process.html#process_process_hrtime_time" target="_blank" rel="noopener">process.hrtime</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;总体来说比较简单，主要用到了 &lt;code&gt;process.hrtime&lt;/code&gt; 这个方法。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
        
      
    
    </summary>
    
      <category term="Koa" scheme="http://yoursite.com/categories/Koa/"/>
    
    
      <category term="koa" scheme="http://yoursite.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>Koa系列-Livereload：koa-livereload</title>
    <link href="http://yoursite.com/2019/03/13/koa/koa-livereload/"/>
    <id>http://yoursite.com/2019/03/13/koa/koa-livereload/</id>
    <published>2019-03-13T03:27:27.000Z</published>
    <updated>2019-03-27T03:17:19.658Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">livereload</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 选项</span></span><br><span class="line">  opts = opts || &#123;&#125;;</span><br><span class="line">  <span class="comment">// 端口</span></span><br><span class="line">  <span class="keyword">var</span> port = opts.port || <span class="number">35729</span>;</span><br><span class="line">  <span class="comment">// livereload.js文件的路径</span></span><br><span class="line">  <span class="keyword">var</span> src = opts.src || <span class="string">"' + (location.protocol || 'http:') + '//' + (location.hostname || 'localhost') + ':"</span> + port + <span class="string">"/livereload.js?snipver=1"</span>;</span><br><span class="line">  <span class="keyword">var</span> snippet = <span class="string">"\n&lt;script type=\"text/javascript\"&gt;document.write('&lt;script src=\""</span> + src + <span class="string">"\" type=\"text/javascript\"&gt;&lt;\\/script&gt;')&lt;/script&gt;\n"</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> next().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// content-type 不是 text/html 则返回</span></span><br><span class="line">    <span class="keyword">if</span> (ctx.response.type &amp;&amp; !ctx.response.type.includes(<span class="string">'html'</span>)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 实际请求路径在排除路径中，则返回</span></span><br><span class="line">    <span class="keyword">if</span> (opts.excludes) &#123;</span><br><span class="line">      <span class="keyword">var</span> path = ctx.path;</span><br><span class="line">      <span class="keyword">if</span> (opts.excludes.some(<span class="function"><span class="params">exclude</span> =&gt;</span> path.startsWith(exclude))) <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Buffer处理，转化为字符串</span></span><br><span class="line">    <span class="keyword">if</span> (Buffer.isBuffer(ctx.body)) &#123;</span><br><span class="line">      ctx.body = ctx.body.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// string处理，在&lt;/body&gt;之前增加snippet</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> ctx.body === <span class="string">'string'</span>) &#123;</span><br><span class="line">      <span class="comment">// 已经存在livereload.js 则返回</span></span><br><span class="line">      <span class="keyword">if</span> (ctx.body.match(<span class="regexp">/livereload.js/</span>)) <span class="keyword">return</span>;</span><br><span class="line">      ctx.body = ctx.body.replace(<span class="regexp">/&lt;\/body&gt;/</span>, snippet + <span class="string">"&lt;\/body&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// stream处理，通过模板StreamInjecter处理</span></span><br><span class="line">    <span class="keyword">if</span> (ctx.body &amp;&amp; <span class="keyword">typeof</span> ctx.body.pipe === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> injecter = <span class="keyword">new</span> StreamInjecter(&#123;</span><br><span class="line">        matchRegExp : <span class="regexp">/(&lt;\/body&gt;)/</span>,</span><br><span class="line">        inject : snippet,</span><br><span class="line">        replace : snippet + <span class="string">"$1"</span>,</span><br><span class="line">        ignore : <span class="regexp">/livereload.js/</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">var</span> size = +ctx.response.header[<span class="string">'content-length'</span>];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (size) ctx.set(<span class="string">'Content-Length'</span>, size + Buffer.byteLength(snippet));</span><br><span class="line">      ctx.body = ctx.body.pipe(injecter);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用程序的热更新，现在已经有了很好的选择，如 <code>koa-webpack</code> , <code>nodemon</code>, <code>pm2</code> 等。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span
        
      
    
    </summary>
    
      <category term="Koa" scheme="http://yoursite.com/categories/Koa/"/>
    
    
      <category term="koa" scheme="http://yoursite.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>Koa系列CSS Preprocessor：koa-sass</title>
    <link href="http://yoursite.com/2019/03/11/koa/koa-sass/"/>
    <id>http://yoursite.com/2019/03/11/koa/koa-sass/</id>
    <published>2019-03-11T09:39:21.000Z</published>
    <updated>2019-03-11T09:51:06.560Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">&#123; mountAt, src, dest, importPaths = [] &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 判断mountAt后缀是否为'/' ，若是则去掉</span></span><br><span class="line">  mountAt = mountAt.substr(<span class="number">-1</span>) === <span class="string">'/'</span> ? mountAt.slice(<span class="number">0</span>, <span class="number">-1</span>) : mountAt;</span><br><span class="line">  <span class="comment">// 同步判断是否存在dest，若不存在则创建</span></span><br><span class="line">  <span class="keyword">if</span> (fs.existsSync(dest) === <span class="literal">false</span>) &#123;</span><br><span class="line">    fs.mkdirsSync(dest);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 解析ctx.path.slice(mountAt.length)</span></span><br><span class="line">    <span class="keyword">const</span> subPath = path.parse(ctx.path.slice(mountAt.length));</span><br><span class="line">    <span class="comment">// 得到.scss路径</span></span><br><span class="line">    <span class="keyword">const</span> srcFile = path.join(src, subPath.dir, subPath.name + <span class="string">'.scss'</span>);</span><br><span class="line">    <span class="comment">// 判断srcFile是否存在，并且后缀名不能为.css</span></span><br><span class="line">    <span class="keyword">if</span> (fs.existsSync(srcFile) === <span class="literal">false</span> || subPath.ext !== <span class="string">'.css'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> next();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 得到目标路径</span></span><br><span class="line">    <span class="keyword">const</span> destFile = path.join(dest, subPath.dir, subPath.base);</span><br><span class="line">    <span class="comment">// 通过node-sass提供的renderSync返回结果</span></span><br><span class="line">    <span class="keyword">const</span> result = sass.renderSync(&#123;</span><br><span class="line">      file: srcFile,</span><br><span class="line">      importer: nodeSassGlobImporter(),</span><br><span class="line">      includePaths: importPaths</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 同步写入</span></span><br><span class="line">    fs.writeFileSync(destFile, result.css);</span><br><span class="line">    <span class="comment">// 最后通过koa-mount koa-static</span></span><br><span class="line">    <span class="keyword">return</span> mount(mountAt, serveStatic(dest))(ctx, next);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首选是判断需要解析的文件，接着解析路径，然后得到源 <code>.scss</code> 文件路径，再接着重新得到目标文件路径，然后通过 <code>node-sass</code> 提供的renderSync执行 <code>.scss</code> 结果。然后写入，最后通过 <code>koa-mount</code> 和 <code>koa-static</code> 解析静态资源。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span
        
      
    
    </summary>
    
      <category term="Koa" scheme="http://yoursite.com/categories/Koa/"/>
    
    
      <category term="koa" scheme="http://yoursite.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>Koa系列-Error reporting：koa-error</title>
    <link href="http://yoursite.com/2019/03/11/koa/koa-error/"/>
    <id>http://yoursite.com/2019/03/11/koa/koa-error/</id>
    <published>2019-03-11T01:50:10.000Z</published>
    <updated>2019-03-11T02:12:40.140Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">ctx,next</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选项 <code>opts</code> 有 <code>env</code> , <code>ctx</code> , <code>request</code> , <code>response</code> , <code>error</code> , <code>stack</code> ,<code>status</code> , <code>code</code> 这几个选项，可以覆盖默认参数。</p><p>通过模块引擎整合库 <code>consolidate</code> 可以选择不同的模板引擎。</p><p>返回的async函数，首先判断是否 <code>status</code> 为400，否则就根据 <code>ctx.accepts</code> 的值（’text’,’json’,’html’)来执行相对应的代码。</p><p>若为 <code>html</code> ，则通过 <code>consolidate</code> 生成 <code>error html</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span
        
      
    
    </summary>
    
      <category term="Koa" scheme="http://yoursite.com/categories/Koa/"/>
    
    
      <category term="koa" scheme="http://yoursite.com/tags/koa/"/>
    
  </entry>
  
</feed>
